abc abd ijk 42 --trace
truncated at the end of the first Run.step()
Using this to decide what next to check for accuracy.

#### UPDATE EVERYTHING
copycat.run:63:         if self.coderack.time == self.slipnet.clamp_time * self.timestep:
copycat.run:66:         self.coderack.update(self.workspace.temperature)
copycat.coderack:162:         self.temperature = temperature
copycat.run:67:         codelets = self.workspace.bottom_up_codelets()
copycat.workspace:1005:         types = [('description', DescriptionBottomUpScout, 30),
copycat.workspace:1006:                  ('bond', BondBottomUpScout, 30),
copycat.workspace:1007:                  ('group', GroupWholeStringScout, 30),
copycat.workspace:1008:                  ('replacement', ReplacementFinder, 30),
copycat.workspace:1009:                  ('correspondence', CorrespondenceBottomUpScout, 30),
copycat.workspace:1010:                  ('correspondence', CorrespondenceImportantObjectScout, 30),
copycat.workspace:1011:                  ('rule', RuleScout, 30),
copycat.workspace:1012:                  ('translator_rule', RuleTranslator, 30 if self.temperature > 25 else 60)]
copycat.workspace:1014:         codelets = [(Breaker(), 0)]
copycat.coderack.codelet:27:         self.arguments = arguments
copycat.coderack.codelet:28:         self.timestamp = None
copycat.coderack.codelet:29:         self.bin = None
copycat.workspace:1015:         for category, codelet, urgency in types:
copycat.workspace:1016:             codelets.extend(self.get_codelets(category, codelet, urgency))
copycat.workspace:992:             codelets = []
copycat.workspace:993:             probability = self.post_codelet_probability(category)
copycat.workspace:943:         probability = 0
copycat.workspace:944:         if category == 'description':
copycat.workspace:945:             probability = math.sqrt(self.temperature) / 100.
copycat.workspace:959:         return probability / 100.
copycat.workspace:994:             number = self.post_codelet_number(category)
copycat.workspace:966:         number = 0
copycat.workspace:967:         case = {'few': 1, 'medium': 2, 'many': 3}
copycat.workspace:968:         if category == 'description':
copycat.workspace:969:             number = 1
copycat.workspace:983:         return number
copycat.workspace:995:             if toolbox.flip_coin(probability):
copycat.toolbox:87:     if prob_of_true >= 1:
copycat.toolbox:89:     return select_assoc([[True, int(prob_of_true * 1000)]
copycat.toolbox:90:                         ,[False, int((1 - prob_of_true) * 1000)]])
copycat.toolbox:57:     if assoc_list == []:
copycat.toolbox:60:     probability_sum = 0
copycat.toolbox:61:     for item, probability in assoc_list:
copycat.toolbox:62:         probability_sum += probability
copycat.toolbox:61:     for item, probability in assoc_list:
copycat.toolbox:62:         probability_sum += probability
copycat.toolbox:61:     for item, probability in assoc_list:
copycat.toolbox:63:     if probability_sum <= 0:
copycat.toolbox:66:     value = random.uniform(0, probability_sum)
random:340:         return a + (b-a) * self.random()
copycat.toolbox:67:     new_probability_sum = 0
copycat.toolbox:68:     for item, probability in assoc_list:
copycat.toolbox:69:         new_probability_sum += probability
copycat.toolbox:70:         if new_probability_sum > value:
copycat.toolbox:68:     for item, probability in assoc_list:
copycat.toolbox:69:         new_probability_sum += probability
copycat.toolbox:70:         if new_probability_sum > value:
copycat.toolbox:71:             return item
copycat.workspace:998:             return codelets
copycat.workspace:1015:         for category, codelet, urgency in types:
copycat.workspace:1016:             codelets.extend(self.get_codelets(category, codelet, urgency))
copycat.workspace:992:             codelets = []
copycat.workspace:993:             probability = self.post_codelet_probability(category)
copycat.workspace:943:         probability = 0
copycat.workspace:944:         if category == 'description':
copycat.workspace:946:         elif category in ['bond', 'group']:
copycat.workspace:947:             probability = self.intra_string_unhappiness()
copycat.workspace:1132:         return 30
copycat.workspace:959:         return probability / 100.
copycat.workspace:994:             number = self.post_codelet_number(category)
copycat.workspace:966:         number = 0
copycat.workspace:967:         case = {'few': 1, 'medium': 2, 'many': 3}
copycat.workspace:968:         if category == 'description':
copycat.workspace:970:         elif category == 'bond':
copycat.workspace:971:             number = case[self.rough_number_of_unrelated_objects()]
copycat.workspace:1091:         number_of_unrelated_objects = len(self.unrelated_objects())
copycat.workspace:1046:         unrelated_objects = []
copycat.workspace:1047:         for obj in self.objects():
copycat.workspace:1020:         return self.initial_string.objects() + self.target_string.objects()
copycat.workspace.string:57:         return self.letters + self.groups
copycat.workspace.string:57:         return self.letters + self.groups
copycat.workspace:1048:             if not obj:
copycat.workspace:1050:             if not obj.spans_whole_string() and obj.group == None:
copycat.workspace.wobject:189:         return self.letter_span() == self.string.length
copycat.workspace.wobject:158:         if self.groups == None:
copycat.workspace.wobject:159:             return 1
copycat.workspace:1051:                 number_of_bonds = len(obj.incoming_bonds) + len(obj.outgoing_bonds)
copycat.workspace:1052:                 if obj.is_leftmost_in_string() or obj.is_rightmost_in_string():
copycat.workspace.wobject:171:         return self.left_string_position == 0
copycat.workspace:1053:                     if number_of_bonds == 0: unrelated_objects.append(obj)
copycat.workspace:1047:         for obj in self.objects():
copycat.workspace:1048:             if not obj:
copycat.workspace:1050:             if not obj.spans_whole_string() and obj.group == None:
copycat.workspace.wobject:189:         return self.letter_span() == self.string.length
copycat.workspace.wobject:158:         if self.groups == None:
copycat.workspace.wobject:159:             return 1
copycat.workspace:1051:                 number_of_bonds = len(obj.incoming_bonds) + len(obj.outgoing_bonds)
copycat.workspace:1052:                 if obj.is_leftmost_in_string() or obj.is_rightmost_in_string():
copycat.workspace.wobject:171:         return self.left_string_position == 0
copycat.workspace.wobject:174:         right_position = len(self.string.letters) - 1
copycat.workspace.wobject:175:         return self.right_string_position == right_position
copycat.workspace:1055:                     if number_of_bonds < 2: unrelated_objects.append(object)
copycat.workspace:1047:         for obj in self.objects():
copycat.workspace:1048:             if not obj:
copycat.workspace:1050:             if not obj.spans_whole_string() and obj.group == None:
copycat.workspace.wobject:189:         return self.letter_span() == self.string.length
copycat.workspace.wobject:158:         if self.groups == None:
copycat.workspace.wobject:159:             return 1
copycat.workspace:1051:                 number_of_bonds = len(obj.incoming_bonds) + len(obj.outgoing_bonds)
copycat.workspace:1052:                 if obj.is_leftmost_in_string() or obj.is_rightmost_in_string():
copycat.workspace.wobject:171:         return self.left_string_position == 0
copycat.workspace.wobject:174:         right_position = len(self.string.letters) - 1
copycat.workspace.wobject:175:         return self.right_string_position == right_position
copycat.workspace:1053:                     if number_of_bonds == 0: unrelated_objects.append(obj)
copycat.workspace:1047:         for obj in self.objects():
copycat.workspace:1048:             if not obj:
copycat.workspace:1049:                 continue
copycat.workspace:1047:         for obj in self.objects():
copycat.workspace:1048:             if not obj:
copycat.workspace:1049:                 continue
copycat.workspace:1047:         for obj in self.objects():
copycat.workspace:1048:             if not obj:
copycat.workspace:1049:                 continue
copycat.workspace:1047:         for obj in self.objects():
copycat.workspace:1048:             if not obj:
copycat.workspace:1050:             if not obj.spans_whole_string() and obj.group == None:
copycat.workspace.wobject:189:         return self.letter_span() == self.string.length
copycat.workspace.wobject:158:         if self.groups == None:
copycat.workspace.wobject:159:             return 1
copycat.workspace:1051:                 number_of_bonds = len(obj.incoming_bonds) + len(obj.outgoing_bonds)
copycat.workspace:1052:                 if obj.is_leftmost_in_string() or obj.is_rightmost_in_string():
copycat.workspace.wobject:171:         return self.left_string_position == 0
copycat.workspace:1053:                     if number_of_bonds == 0: unrelated_objects.append(obj)
copycat.workspace:1047:         for obj in self.objects():
copycat.workspace:1048:             if not obj:
copycat.workspace:1050:             if not obj.spans_whole_string() and obj.group == None:
copycat.workspace.wobject:189:         return self.letter_span() == self.string.length
copycat.workspace.wobject:158:         if self.groups == None:
copycat.workspace.wobject:159:             return 1
copycat.workspace:1051:                 number_of_bonds = len(obj.incoming_bonds) + len(obj.outgoing_bonds)
copycat.workspace:1052:                 if obj.is_leftmost_in_string() or obj.is_rightmost_in_string():
copycat.workspace.wobject:171:         return self.left_string_position == 0
copycat.workspace.wobject:174:         right_position = len(self.string.letters) - 1
copycat.workspace.wobject:175:         return self.right_string_position == right_position
copycat.workspace:1055:                     if number_of_bonds < 2: unrelated_objects.append(object)
copycat.workspace:1047:         for obj in self.objects():
copycat.workspace:1048:             if not obj:
copycat.workspace:1050:             if not obj.spans_whole_string() and obj.group == None:
copycat.workspace.wobject:189:         return self.letter_span() == self.string.length
copycat.workspace.wobject:158:         if self.groups == None:
copycat.workspace.wobject:159:             return 1
copycat.workspace:1051:                 number_of_bonds = len(obj.incoming_bonds) + len(obj.outgoing_bonds)
copycat.workspace:1052:                 if obj.is_leftmost_in_string() or obj.is_rightmost_in_string():
copycat.workspace.wobject:171:         return self.left_string_position == 0
copycat.workspace.wobject:174:         right_position = len(self.string.letters) - 1
copycat.workspace.wobject:175:         return self.right_string_position == right_position
copycat.workspace:1053:                     if number_of_bonds == 0: unrelated_objects.append(obj)
copycat.workspace:1047:         for obj in self.objects():
copycat.workspace:1048:             if not obj:
copycat.workspace:1049:                 continue
copycat.workspace:1047:         for obj in self.objects():
copycat.workspace:1048:             if not obj:
copycat.workspace:1049:                 continue
copycat.workspace:1047:         for obj in self.objects():
copycat.workspace:1048:             if not obj:
copycat.workspace:1049:                 continue
copycat.workspace:1047:         for obj in self.objects():
copycat.workspace:1056:         return unrelated_objects
copycat.workspace:1092:         if number_of_unrelated_objects < toolbox.blur(2):
copycat.toolbox:102:     return random.normalvariate(number, math.sqrt(number))
random:357:         random = self.random
random:358:         while 1:
random:359:             u1 = random()
random:360:             u2 = 1.0 - random()
random:361:             z = NV_MAGICCONST*(u1-0.5)/u2
random:362:             zz = z*z/4.0
random:363:             if zz <= -_log(u2):
random:364:                 break
random:365:         return mu + z*sigma
copycat.workspace:1094:         elif number_of_unrelated_objects < toolbox.blur(4):
copycat.toolbox:102:     return random.normalvariate(number, math.sqrt(number))
random:357:         random = self.random
random:358:         while 1:
random:359:             u1 = random()
random:360:             u2 = 1.0 - random()
random:361:             z = NV_MAGICCONST*(u1-0.5)/u2
random:362:             zz = z*z/4.0
random:363:             if zz <= -_log(u2):
random:364:                 break
random:365:         return mu + z*sigma
copycat.workspace:1097:             return 'many'
copycat.workspace:983:         return number
copycat.workspace:995:             if toolbox.flip_coin(probability):
copycat.toolbox:87:     if prob_of_true >= 1:
copycat.toolbox:89:     return select_assoc([[True, int(prob_of_true * 1000)]
copycat.toolbox:90:                         ,[False, int((1 - prob_of_true) * 1000)]])
copycat.toolbox:57:     if assoc_list == []:
copycat.toolbox:60:     probability_sum = 0
copycat.toolbox:61:     for item, probability in assoc_list:
copycat.toolbox:62:         probability_sum += probability
copycat.toolbox:61:     for item, probability in assoc_list:
copycat.toolbox:62:         probability_sum += probability
copycat.toolbox:61:     for item, probability in assoc_list:
copycat.toolbox:63:     if probability_sum <= 0:
copycat.toolbox:66:     value = random.uniform(0, probability_sum)
random:340:         return a + (b-a) * self.random()
copycat.toolbox:67:     new_probability_sum = 0
copycat.toolbox:68:     for item, probability in assoc_list:
copycat.toolbox:69:         new_probability_sum += probability
copycat.toolbox:70:         if new_probability_sum > value:
copycat.toolbox:68:     for item, probability in assoc_list:
copycat.toolbox:69:         new_probability_sum += probability
copycat.toolbox:70:         if new_probability_sum > value:
copycat.toolbox:71:             return item
copycat.workspace:998:             return codelets
copycat.workspace:1015:         for category, codelet, urgency in types:
copycat.workspace:1016:             codelets.extend(self.get_codelets(category, codelet, urgency))
copycat.workspace:992:             codelets = []
copycat.workspace:993:             probability = self.post_codelet_probability(category)
copycat.workspace:943:         probability = 0
copycat.workspace:944:         if category == 'description':
copycat.workspace:946:         elif category in ['bond', 'group']:
copycat.workspace:947:             probability = self.intra_string_unhappiness()
copycat.workspace:1132:         return 30
copycat.workspace:959:         return probability / 100.
copycat.workspace:994:             number = self.post_codelet_number(category)
copycat.workspace:966:         number = 0
copycat.workspace:967:         case = {'few': 1, 'medium': 2, 'many': 3}
copycat.workspace:968:         if category == 'description':
copycat.workspace:970:         elif category == 'bond':
copycat.workspace:972:         elif category == 'group' and self.bonds:
copycat.workspace:973:             number = case[self.rough_number_of_ungrouped_objects()]
copycat.workspace:1100:         number_of_ungrouped_objects = len(self.ungrouped_objects())
copycat.workspace:1059:         ungrouped_objects = []
copycat.workspace:1060:         for obj in self.objects():
copycat.workspace:1020:         return self.initial_string.objects() + self.target_string.objects()
copycat.workspace.string:57:         return self.letters + self.groups
copycat.workspace.string:57:         return self.letters + self.groups
copycat.workspace:1061:             if not obj:
copycat.workspace:1063:             if not obj.spans_whole_string() and obj.group == None:
copycat.workspace.wobject:189:         return self.letter_span() == self.string.length
copycat.workspace.wobject:158:         if self.groups == None:
copycat.workspace.wobject:159:             return 1
copycat.workspace:1064:                 ungrouped_objects.append(obj)
copycat.workspace:1060:         for obj in self.objects():
copycat.workspace:1061:             if not obj:
copycat.workspace:1063:             if not obj.spans_whole_string() and obj.group == None:
copycat.workspace.wobject:189:         return self.letter_span() == self.string.length
copycat.workspace.wobject:158:         if self.groups == None:
copycat.workspace.wobject:159:             return 1
copycat.workspace:1064:                 ungrouped_objects.append(obj)
copycat.workspace:1060:         for obj in self.objects():
copycat.workspace:1061:             if not obj:
copycat.workspace:1063:             if not obj.spans_whole_string() and obj.group == None:
copycat.workspace.wobject:189:         return self.letter_span() == self.string.length
copycat.workspace.wobject:158:         if self.groups == None:
copycat.workspace.wobject:159:             return 1
copycat.workspace:1064:                 ungrouped_objects.append(obj)
copycat.workspace:1060:         for obj in self.objects():
copycat.workspace:1061:             if not obj:
copycat.workspace:1062:                 continue
copycat.workspace:1060:         for obj in self.objects():
copycat.workspace:1061:             if not obj:
copycat.workspace:1062:                 continue
copycat.workspace:1060:         for obj in self.objects():
copycat.workspace:1061:             if not obj:
copycat.workspace:1062:                 continue
copycat.workspace:1060:         for obj in self.objects():
copycat.workspace:1061:             if not obj:
copycat.workspace:1063:             if not obj.spans_whole_string() and obj.group == None:
copycat.workspace.wobject:189:         return self.letter_span() == self.string.length
copycat.workspace.wobject:158:         if self.groups == None:
copycat.workspace.wobject:159:             return 1
copycat.workspace:1064:                 ungrouped_objects.append(obj)
copycat.workspace:1060:         for obj in self.objects():
copycat.workspace:1061:             if not obj:
copycat.workspace:1063:             if not obj.spans_whole_string() and obj.group == None:
copycat.workspace.wobject:189:         return self.letter_span() == self.string.length
copycat.workspace.wobject:158:         if self.groups == None:
copycat.workspace.wobject:159:             return 1
copycat.workspace:1064:                 ungrouped_objects.append(obj)
copycat.workspace:1060:         for obj in self.objects():
copycat.workspace:1061:             if not obj:
copycat.workspace:1063:             if not obj.spans_whole_string() and obj.group == None:
copycat.workspace.wobject:189:         return self.letter_span() == self.string.length
copycat.workspace.wobject:158:         if self.groups == None:
copycat.workspace.wobject:159:             return 1
copycat.workspace:1064:                 ungrouped_objects.append(obj)
copycat.workspace:1060:         for obj in self.objects():
copycat.workspace:1061:             if not obj:
copycat.workspace:1062:                 continue
copycat.workspace:1060:         for obj in self.objects():
copycat.workspace:1061:             if not obj:
copycat.workspace:1062:                 continue
copycat.workspace:1060:         for obj in self.objects():
copycat.workspace:1061:             if not obj:
copycat.workspace:1062:                 continue
copycat.workspace:1060:         for obj in self.objects():
copycat.workspace:1065:         return ungrouped_objects
copycat.workspace:1101:         if number_of_ungrouped_objects < toolbox.blur(2):
copycat.toolbox:102:     return random.normalvariate(number, math.sqrt(number))
random:357:         random = self.random
random:358:         while 1:
random:359:             u1 = random()
random:360:             u2 = 1.0 - random()
random:361:             z = NV_MAGICCONST*(u1-0.5)/u2
random:362:             zz = z*z/4.0
random:363:             if zz <= -_log(u2):
random:359:             u1 = random()
random:360:             u2 = 1.0 - random()
random:361:             z = NV_MAGICCONST*(u1-0.5)/u2
random:362:             zz = z*z/4.0
random:363:             if zz <= -_log(u2):
random:364:                 break
random:365:         return mu + z*sigma
copycat.workspace:1103:         elif number_of_ungrouped_objects < toolbox.blur(4):
copycat.toolbox:102:     return random.normalvariate(number, math.sqrt(number))
random:357:         random = self.random
random:358:         while 1:
random:359:             u1 = random()
random:360:             u2 = 1.0 - random()
random:361:             z = NV_MAGICCONST*(u1-0.5)/u2
random:362:             zz = z*z/4.0
random:363:             if zz <= -_log(u2):
random:364:                 break
random:365:         return mu + z*sigma
copycat.workspace:1106:             return 'many'
copycat.workspace:983:         return number
copycat.workspace:995:             if toolbox.flip_coin(probability):
copycat.toolbox:87:     if prob_of_true >= 1:
copycat.toolbox:89:     return select_assoc([[True, int(prob_of_true * 1000)]
copycat.toolbox:90:                         ,[False, int((1 - prob_of_true) * 1000)]])
copycat.toolbox:57:     if assoc_list == []:
copycat.toolbox:60:     probability_sum = 0
copycat.toolbox:61:     for item, probability in assoc_list:
copycat.toolbox:62:         probability_sum += probability
copycat.toolbox:61:     for item, probability in assoc_list:
copycat.toolbox:62:         probability_sum += probability
copycat.toolbox:61:     for item, probability in assoc_list:
copycat.toolbox:63:     if probability_sum <= 0:
copycat.toolbox:66:     value = random.uniform(0, probability_sum)
random:340:         return a + (b-a) * self.random()
copycat.toolbox:67:     new_probability_sum = 0
copycat.toolbox:68:     for item, probability in assoc_list:
copycat.toolbox:69:         new_probability_sum += probability
copycat.toolbox:70:         if new_probability_sum > value:
copycat.toolbox:71:             return item
copycat.workspace:996:                 for i in range(number):
copycat.workspace:997:                     codelets.append((codelet(args), urgency))
copycat.coderack.codelet:27:         self.arguments = arguments
copycat.coderack.codelet:28:         self.timestamp = None
copycat.coderack.codelet:29:         self.bin = None
copycat.workspace:996:                 for i in range(number):
copycat.workspace:997:                     codelets.append((codelet(args), urgency))
copycat.coderack.codelet:27:         self.arguments = arguments
copycat.coderack.codelet:28:         self.timestamp = None
copycat.coderack.codelet:29:         self.bin = None
copycat.workspace:996:                 for i in range(number):
copycat.workspace:997:                     codelets.append((codelet(args), urgency))
copycat.coderack.codelet:27:         self.arguments = arguments
copycat.coderack.codelet:28:         self.timestamp = None
copycat.coderack.codelet:29:         self.bin = None
copycat.workspace:996:                 for i in range(number):
copycat.workspace:998:             return codelets
copycat.workspace:1015:         for category, codelet, urgency in types:
copycat.workspace:1016:             codelets.extend(self.get_codelets(category, codelet, urgency))
copycat.workspace:992:             codelets = []
copycat.workspace:993:             probability = self.post_codelet_probability(category)
copycat.workspace:943:         probability = 0
copycat.workspace:944:         if category == 'description':
copycat.workspace:946:         elif category in ['bond', 'group']:
copycat.workspace:948:         elif category == 'replacement' and self.unreplaced_objects():
copycat.workspace:1075:         unreplaced_objects = []
copycat.workspace:1076:         for letter in self.initial_string.letters:
copycat.workspace:1077:             if letter.replacement == None:
copycat.workspace:1078:                 unreplaced_objects.append(letter)
copycat.workspace:1076:         for letter in self.initial_string.letters:
copycat.workspace:1077:             if letter.replacement == None:
copycat.workspace:1078:                 unreplaced_objects.append(letter)
copycat.workspace:1076:         for letter in self.initial_string.letters:
copycat.workspace:1077:             if letter.replacement == None:
copycat.workspace:1078:                 unreplaced_objects.append(letter)
copycat.workspace:1076:         for letter in self.initial_string.letters:
copycat.workspace:1079:         return unreplaced_objects
copycat.workspace:949:             probability = 100
copycat.workspace:959:         return probability / 100.
copycat.workspace:994:             number = self.post_codelet_number(category)
copycat.workspace:966:         number = 0
copycat.workspace:967:         case = {'few': 1, 'medium': 2, 'many': 3}
copycat.workspace:968:         if category == 'description':
copycat.workspace:970:         elif category == 'bond':
copycat.workspace:972:         elif category == 'group' and self.bonds:
copycat.workspace:974:         elif category == 'replacement' and self.rule:
copycat.workspace:976:         elif category == 'correspondence':
copycat.workspace:978:         elif category == 'rule':
copycat.workspace:980:         elif category == 'translated_rule' and self.rule:
copycat.workspace:983:         return number
copycat.workspace:995:             if toolbox.flip_coin(probability):
copycat.toolbox:87:     if prob_of_true >= 1:
copycat.toolbox:88:         return True
copycat.workspace:996:                 for i in range(number):
copycat.workspace:998:             return codelets
copycat.workspace:1015:         for category, codelet, urgency in types:
copycat.workspace:1016:             codelets.extend(self.get_codelets(category, codelet, urgency))
copycat.workspace:992:             codelets = []
copycat.workspace:993:             probability = self.post_codelet_probability(category)
copycat.workspace:943:         probability = 0
copycat.workspace:944:         if category == 'description':
copycat.workspace:946:         elif category in ['bond', 'group']:
copycat.workspace:948:         elif category == 'replacement' and self.unreplaced_objects():
copycat.workspace:950:         elif category == 'correspondence':
copycat.workspace:951:             probability = self.inter_string_unhappiness()
copycat.workspace:1136:         return 30
copycat.workspace:959:         return probability / 100.
copycat.workspace:994:             number = self.post_codelet_number(category)
copycat.workspace:966:         number = 0
copycat.workspace:967:         case = {'few': 1, 'medium': 2, 'many': 3}
copycat.workspace:968:         if category == 'description':
copycat.workspace:970:         elif category == 'bond':
copycat.workspace:972:         elif category == 'group' and self.bonds:
copycat.workspace:974:         elif category == 'replacement' and self.rule:
copycat.workspace:976:         elif category == 'correspondence':
copycat.workspace:977:             number = case[self.rough_number_of_uncorresponding_objects()]
copycat.workspace:1118:         number_of_uncorresponding_objects = len(self.uncorresponding_objects())
copycat.workspace:1082:         uncorresponding_objects = []
copycat.workspace:1083:         for obj in self.objects():
copycat.workspace:1020:         return self.initial_string.objects() + self.target_string.objects()
copycat.workspace.string:57:         return self.letters + self.groups
copycat.workspace.string:57:         return self.letters + self.groups
copycat.workspace:1084:             if not obj:
copycat.workspace:1086:             if obj.correspondence == None:
copycat.workspace:1087:                 uncorresponding_objects.append(obj)
copycat.workspace:1083:         for obj in self.objects():
copycat.workspace:1084:             if not obj:
copycat.workspace:1086:             if obj.correspondence == None:
copycat.workspace:1087:                 uncorresponding_objects.append(obj)
copycat.workspace:1083:         for obj in self.objects():
copycat.workspace:1084:             if not obj:
copycat.workspace:1086:             if obj.correspondence == None:
copycat.workspace:1087:                 uncorresponding_objects.append(obj)
copycat.workspace:1083:         for obj in self.objects():
copycat.workspace:1084:             if not obj:
copycat.workspace:1085:                 continue
copycat.workspace:1083:         for obj in self.objects():
copycat.workspace:1084:             if not obj:
copycat.workspace:1085:                 continue
copycat.workspace:1083:         for obj in self.objects():
copycat.workspace:1084:             if not obj:
copycat.workspace:1085:                 continue
copycat.workspace:1083:         for obj in self.objects():
copycat.workspace:1084:             if not obj:
copycat.workspace:1086:             if obj.correspondence == None:
copycat.workspace:1087:                 uncorresponding_objects.append(obj)
copycat.workspace:1083:         for obj in self.objects():
copycat.workspace:1084:             if not obj:
copycat.workspace:1086:             if obj.correspondence == None:
copycat.workspace:1087:                 uncorresponding_objects.append(obj)
copycat.workspace:1083:         for obj in self.objects():
copycat.workspace:1084:             if not obj:
copycat.workspace:1086:             if obj.correspondence == None:
copycat.workspace:1087:                 uncorresponding_objects.append(obj)
copycat.workspace:1083:         for obj in self.objects():
copycat.workspace:1084:             if not obj:
copycat.workspace:1085:                 continue
copycat.workspace:1083:         for obj in self.objects():
copycat.workspace:1084:             if not obj:
copycat.workspace:1085:                 continue
copycat.workspace:1083:         for obj in self.objects():
copycat.workspace:1084:             if not obj:
copycat.workspace:1085:                 continue
copycat.workspace:1083:         for obj in self.objects():
copycat.workspace:1088:         return uncorresponding_objects
copycat.workspace:1119:         if number_of_uncorresponding_objects < toolbox.blur(2):
copycat.toolbox:102:     return random.normalvariate(number, math.sqrt(number))
random:357:         random = self.random
random:358:         while 1:
random:359:             u1 = random()
random:360:             u2 = 1.0 - random()
random:361:             z = NV_MAGICCONST*(u1-0.5)/u2
random:362:             zz = z*z/4.0
random:363:             if zz <= -_log(u2):
random:364:                 break
random:365:         return mu + z*sigma
copycat.workspace:1121:         elif number_of_uncorresponding_objects < toolbox.blur(4):
copycat.toolbox:102:     return random.normalvariate(number, math.sqrt(number))
random:357:         random = self.random
random:358:         while 1:
random:359:             u1 = random()
random:360:             u2 = 1.0 - random()
random:361:             z = NV_MAGICCONST*(u1-0.5)/u2
random:362:             zz = z*z/4.0
random:363:             if zz <= -_log(u2):
random:364:                 break
random:365:         return mu + z*sigma
copycat.workspace:1124:             return 'many'
copycat.workspace:983:         return number
copycat.workspace:995:             if toolbox.flip_coin(probability):
copycat.toolbox:87:     if prob_of_true >= 1:
copycat.toolbox:89:     return select_assoc([[True, int(prob_of_true * 1000)]
copycat.toolbox:90:                         ,[False, int((1 - prob_of_true) * 1000)]])
copycat.toolbox:57:     if assoc_list == []:
copycat.toolbox:60:     probability_sum = 0
copycat.toolbox:61:     for item, probability in assoc_list:
copycat.toolbox:62:         probability_sum += probability
copycat.toolbox:61:     for item, probability in assoc_list:
copycat.toolbox:62:         probability_sum += probability
copycat.toolbox:61:     for item, probability in assoc_list:
copycat.toolbox:63:     if probability_sum <= 0:
copycat.toolbox:66:     value = random.uniform(0, probability_sum)
random:340:         return a + (b-a) * self.random()
copycat.toolbox:67:     new_probability_sum = 0
copycat.toolbox:68:     for item, probability in assoc_list:
copycat.toolbox:69:         new_probability_sum += probability
copycat.toolbox:70:         if new_probability_sum > value:
copycat.toolbox:68:     for item, probability in assoc_list:
copycat.toolbox:69:         new_probability_sum += probability
copycat.toolbox:70:         if new_probability_sum > value:
copycat.toolbox:71:             return item
copycat.workspace:998:             return codelets
copycat.workspace:1015:         for category, codelet, urgency in types:
copycat.workspace:1016:             codelets.extend(self.get_codelets(category, codelet, urgency))
copycat.workspace:992:             codelets = []
copycat.workspace:993:             probability = self.post_codelet_probability(category)
copycat.workspace:943:         probability = 0
copycat.workspace:944:         if category == 'description':
copycat.workspace:946:         elif category in ['bond', 'group']:
copycat.workspace:948:         elif category == 'replacement' and self.unreplaced_objects():
copycat.workspace:950:         elif category == 'correspondence':
copycat.workspace:951:             probability = self.inter_string_unhappiness()
copycat.workspace:1136:         return 30
copycat.workspace:959:         return probability / 100.
copycat.workspace:994:             number = self.post_codelet_number(category)
copycat.workspace:966:         number = 0
copycat.workspace:967:         case = {'few': 1, 'medium': 2, 'many': 3}
copycat.workspace:968:         if category == 'description':
copycat.workspace:970:         elif category == 'bond':
copycat.workspace:972:         elif category == 'group' and self.bonds:
copycat.workspace:974:         elif category == 'replacement' and self.rule:
copycat.workspace:976:         elif category == 'correspondence':
copycat.workspace:977:             number = case[self.rough_number_of_uncorresponding_objects()]
copycat.workspace:1118:         number_of_uncorresponding_objects = len(self.uncorresponding_objects())
copycat.workspace:1082:         uncorresponding_objects = []
copycat.workspace:1083:         for obj in self.objects():
copycat.workspace:1020:         return self.initial_string.objects() + self.target_string.objects()
copycat.workspace.string:57:         return self.letters + self.groups
copycat.workspace.string:57:         return self.letters + self.groups
copycat.workspace:1084:             if not obj:
copycat.workspace:1086:             if obj.correspondence == None:
copycat.workspace:1087:                 uncorresponding_objects.append(obj)
copycat.workspace:1083:         for obj in self.objects():
copycat.workspace:1084:             if not obj:
copycat.workspace:1086:             if obj.correspondence == None:
copycat.workspace:1087:                 uncorresponding_objects.append(obj)
copycat.workspace:1083:         for obj in self.objects():
copycat.workspace:1084:             if not obj:
copycat.workspace:1086:             if obj.correspondence == None:
copycat.workspace:1087:                 uncorresponding_objects.append(obj)
copycat.workspace:1083:         for obj in self.objects():
copycat.workspace:1084:             if not obj:
copycat.workspace:1085:                 continue
copycat.workspace:1083:         for obj in self.objects():
copycat.workspace:1084:             if not obj:
copycat.workspace:1085:                 continue
copycat.workspace:1083:         for obj in self.objects():
copycat.workspace:1084:             if not obj:
copycat.workspace:1085:                 continue
copycat.workspace:1083:         for obj in self.objects():
copycat.workspace:1084:             if not obj:
copycat.workspace:1086:             if obj.correspondence == None:
copycat.workspace:1087:                 uncorresponding_objects.append(obj)
copycat.workspace:1083:         for obj in self.objects():
copycat.workspace:1084:             if not obj:
copycat.workspace:1086:             if obj.correspondence == None:
copycat.workspace:1087:                 uncorresponding_objects.append(obj)
copycat.workspace:1083:         for obj in self.objects():
copycat.workspace:1084:             if not obj:
copycat.workspace:1086:             if obj.correspondence == None:
copycat.workspace:1087:                 uncorresponding_objects.append(obj)
copycat.workspace:1083:         for obj in self.objects():
copycat.workspace:1084:             if not obj:
copycat.workspace:1085:                 continue
copycat.workspace:1083:         for obj in self.objects():
copycat.workspace:1084:             if not obj:
copycat.workspace:1085:                 continue
copycat.workspace:1083:         for obj in self.objects():
copycat.workspace:1084:             if not obj:
copycat.workspace:1085:                 continue
copycat.workspace:1083:         for obj in self.objects():
copycat.workspace:1088:         return uncorresponding_objects
copycat.workspace:1119:         if number_of_uncorresponding_objects < toolbox.blur(2):
copycat.toolbox:102:     return random.normalvariate(number, math.sqrt(number))
random:357:         random = self.random
random:358:         while 1:
random:359:             u1 = random()
random:360:             u2 = 1.0 - random()
random:361:             z = NV_MAGICCONST*(u1-0.5)/u2
random:362:             zz = z*z/4.0
random:363:             if zz <= -_log(u2):
random:359:             u1 = random()
random:360:             u2 = 1.0 - random()
random:361:             z = NV_MAGICCONST*(u1-0.5)/u2
random:362:             zz = z*z/4.0
random:363:             if zz <= -_log(u2):
random:364:                 break
random:365:         return mu + z*sigma
copycat.workspace:1121:         elif number_of_uncorresponding_objects < toolbox.blur(4):
copycat.toolbox:102:     return random.normalvariate(number, math.sqrt(number))
random:357:         random = self.random
random:358:         while 1:
random:359:             u1 = random()
random:360:             u2 = 1.0 - random()
random:361:             z = NV_MAGICCONST*(u1-0.5)/u2
random:362:             zz = z*z/4.0
random:363:             if zz <= -_log(u2):
random:364:                 break
random:365:         return mu + z*sigma
copycat.workspace:1124:             return 'many'
copycat.workspace:983:         return number
copycat.workspace:995:             if toolbox.flip_coin(probability):
copycat.toolbox:87:     if prob_of_true >= 1:
copycat.toolbox:89:     return select_assoc([[True, int(prob_of_true * 1000)]
copycat.toolbox:90:                         ,[False, int((1 - prob_of_true) * 1000)]])
copycat.toolbox:57:     if assoc_list == []:
copycat.toolbox:60:     probability_sum = 0
copycat.toolbox:61:     for item, probability in assoc_list:
copycat.toolbox:62:         probability_sum += probability
copycat.toolbox:61:     for item, probability in assoc_list:
copycat.toolbox:62:         probability_sum += probability
copycat.toolbox:61:     for item, probability in assoc_list:
copycat.toolbox:63:     if probability_sum <= 0:
copycat.toolbox:66:     value = random.uniform(0, probability_sum)
random:340:         return a + (b-a) * self.random()
copycat.toolbox:67:     new_probability_sum = 0
copycat.toolbox:68:     for item, probability in assoc_list:
copycat.toolbox:69:         new_probability_sum += probability
copycat.toolbox:70:         if new_probability_sum > value:
copycat.toolbox:68:     for item, probability in assoc_list:
copycat.toolbox:69:         new_probability_sum += probability
copycat.toolbox:70:         if new_probability_sum > value:
copycat.toolbox:71:             return item
copycat.workspace:998:             return codelets
copycat.workspace:1015:         for category, codelet, urgency in types:
copycat.workspace:1016:             codelets.extend(self.get_codelets(category, codelet, urgency))
copycat.workspace:992:             codelets = []
copycat.workspace:993:             probability = self.post_codelet_probability(category)
copycat.workspace:943:         probability = 0
copycat.workspace:944:         if category == 'description':
copycat.workspace:946:         elif category in ['bond', 'group']:
copycat.workspace:948:         elif category == 'replacement' and self.unreplaced_objects():
copycat.workspace:950:         elif category == 'correspondence':
copycat.workspace:952:         elif category == 'rule' and self.rule:
copycat.workspace:954:         elif category == 'rule':
copycat.workspace:955:             probability = 100
copycat.workspace:959:         return probability / 100.
copycat.workspace:994:             number = self.post_codelet_number(category)
copycat.workspace:966:         number = 0
copycat.workspace:967:         case = {'few': 1, 'medium': 2, 'many': 3}
copycat.workspace:968:         if category == 'description':
copycat.workspace:970:         elif category == 'bond':
copycat.workspace:972:         elif category == 'group' and self.bonds:
copycat.workspace:974:         elif category == 'replacement' and self.rule:
copycat.workspace:976:         elif category == 'correspondence':
copycat.workspace:978:         elif category == 'rule':
copycat.workspace:979:             number = 2
copycat.workspace:983:         return number
copycat.workspace:995:             if toolbox.flip_coin(probability):
copycat.toolbox:87:     if prob_of_true >= 1:
copycat.toolbox:88:         return True
copycat.workspace:996:                 for i in range(number):
copycat.workspace:997:                     codelets.append((codelet(args), urgency))
copycat.coderack.codelet:27:         self.arguments = arguments
copycat.coderack.codelet:28:         self.timestamp = None
copycat.coderack.codelet:29:         self.bin = None
copycat.workspace:996:                 for i in range(number):
copycat.workspace:997:                     codelets.append((codelet(args), urgency))
copycat.coderack.codelet:27:         self.arguments = arguments
copycat.coderack.codelet:28:         self.timestamp = None
copycat.coderack.codelet:29:         self.bin = None
copycat.workspace:996:                 for i in range(number):
copycat.workspace:998:             return codelets
copycat.workspace:1015:         for category, codelet, urgency in types:
copycat.workspace:1016:             codelets.extend(self.get_codelets(category, codelet, urgency))
copycat.workspace:992:             codelets = []
copycat.workspace:993:             probability = self.post_codelet_probability(category)
copycat.workspace:943:         probability = 0
copycat.workspace:944:         if category == 'description':
copycat.workspace:946:         elif category in ['bond', 'group']:
copycat.workspace:948:         elif category == 'replacement' and self.unreplaced_objects():
copycat.workspace:950:         elif category == 'correspondence':
copycat.workspace:952:         elif category == 'rule' and self.rule:
copycat.workspace:954:         elif category == 'rule':
copycat.workspace:956:         elif category == 'translated_rule' and self.rule:
copycat.workspace:959:         return probability / 100.
copycat.workspace:994:             number = self.post_codelet_number(category)
copycat.workspace:966:         number = 0
copycat.workspace:967:         case = {'few': 1, 'medium': 2, 'many': 3}
copycat.workspace:968:         if category == 'description':
copycat.workspace:970:         elif category == 'bond':
copycat.workspace:972:         elif category == 'group' and self.bonds:
copycat.workspace:974:         elif category == 'replacement' and self.rule:
copycat.workspace:976:         elif category == 'correspondence':
copycat.workspace:978:         elif category == 'rule':
copycat.workspace:980:         elif category == 'translated_rule' and self.rule:
copycat.workspace:983:         return number
copycat.workspace:995:             if toolbox.flip_coin(probability):
copycat.toolbox:87:     if prob_of_true >= 1:
copycat.toolbox:89:     return select_assoc([[True, int(prob_of_true * 1000)]
copycat.toolbox:90:                         ,[False, int((1 - prob_of_true) * 1000)]])
copycat.toolbox:57:     if assoc_list == []:
copycat.toolbox:60:     probability_sum = 0
copycat.toolbox:61:     for item, probability in assoc_list:
copycat.toolbox:62:         probability_sum += probability
copycat.toolbox:61:     for item, probability in assoc_list:
copycat.toolbox:62:         probability_sum += probability
copycat.toolbox:61:     for item, probability in assoc_list:
copycat.toolbox:63:     if probability_sum <= 0:
copycat.toolbox:66:     value = random.uniform(0, probability_sum)
random:340:         return a + (b-a) * self.random()
copycat.toolbox:67:     new_probability_sum = 0
copycat.toolbox:68:     for item, probability in assoc_list:
copycat.toolbox:69:         new_probability_sum += probability
copycat.toolbox:70:         if new_probability_sum > value:
copycat.toolbox:68:     for item, probability in assoc_list:
copycat.toolbox:69:         new_probability_sum += probability
copycat.toolbox:70:         if new_probability_sum > value:
copycat.toolbox:71:             return item
copycat.workspace:998:             return codelets
copycat.workspace:1015:         for category, codelet, urgency in types:
copycat.workspace:1017:         return codelets
copycat.run:68:         top_down_codelet_types = self.slipnet.top_down_codelets()
copycat.slipnet:366:         codelets = []
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:371:         return codelets
copycat.run:69:         for codelet_name, args, urgency in top_down_codelet_types:
copycat.run:74:         for codelet, urgency in codelets:
copycat.run:75:             deleted = self.coderack.post(codelet, urgency)
copycat.coderack:131:         removed_codelet = None
copycat.coderack:132:         codelets = self.codelets()
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.coderack:133:         if len(codelets) == self.max_codelets:
copycat.coderack:138:         if urgency >= 100:
copycat.coderack:141:             index = int((len(self.bins) * urgency) / 100.0)
copycat.coderack:142:             bin = self.bins[index]
copycat.coderack:143:         bin.add(codelet)
copycat.coderack:41:         self.codelets.append(codelet)
copycat.coderack:42:         codelet.bin = self
copycat.coderack:144:         codelet.timestamp = self.time
copycat.coderack:146:         return removed_codelet
copycat.run:76:             if deleted != None:
copycat.run:74:         for codelet, urgency in codelets:
copycat.run:75:             deleted = self.coderack.post(codelet, urgency)
copycat.coderack:131:         removed_codelet = None
copycat.coderack:132:         codelets = self.codelets()
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.coderack:133:         if len(codelets) == self.max_codelets:
copycat.coderack:138:         if urgency >= 100:
copycat.coderack:141:             index = int((len(self.bins) * urgency) / 100.0)
copycat.coderack:142:             bin = self.bins[index]
copycat.coderack:143:         bin.add(codelet)
copycat.coderack:41:         self.codelets.append(codelet)
copycat.coderack:42:         codelet.bin = self
copycat.coderack:144:         codelet.timestamp = self.time
copycat.coderack:146:         return removed_codelet
copycat.run:76:             if deleted != None:
copycat.run:74:         for codelet, urgency in codelets:
copycat.run:75:             deleted = self.coderack.post(codelet, urgency)
copycat.coderack:131:         removed_codelet = None
copycat.coderack:132:         codelets = self.codelets()
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.coderack:133:         if len(codelets) == self.max_codelets:
copycat.coderack:138:         if urgency >= 100:
copycat.coderack:141:             index = int((len(self.bins) * urgency) / 100.0)
copycat.coderack:142:             bin = self.bins[index]
copycat.coderack:143:         bin.add(codelet)
copycat.coderack:41:         self.codelets.append(codelet)
copycat.coderack:42:         codelet.bin = self
copycat.coderack:144:         codelet.timestamp = self.time
copycat.coderack:146:         return removed_codelet
copycat.run:76:             if deleted != None:
copycat.run:74:         for codelet, urgency in codelets:
copycat.run:75:             deleted = self.coderack.post(codelet, urgency)
copycat.coderack:131:         removed_codelet = None
copycat.coderack:132:         codelets = self.codelets()
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.coderack:133:         if len(codelets) == self.max_codelets:
copycat.coderack:138:         if urgency >= 100:
copycat.coderack:141:             index = int((len(self.bins) * urgency) / 100.0)
copycat.coderack:142:             bin = self.bins[index]
copycat.coderack:143:         bin.add(codelet)
copycat.coderack:41:         self.codelets.append(codelet)
copycat.coderack:42:         codelet.bin = self
copycat.coderack:144:         codelet.timestamp = self.time
copycat.coderack:146:         return removed_codelet
copycat.run:76:             if deleted != None:
copycat.run:74:         for codelet, urgency in codelets:
copycat.run:75:             deleted = self.coderack.post(codelet, urgency)
copycat.coderack:131:         removed_codelet = None
copycat.coderack:132:         codelets = self.codelets()
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.coderack:133:         if len(codelets) == self.max_codelets:
copycat.coderack:138:         if urgency >= 100:
copycat.coderack:141:             index = int((len(self.bins) * urgency) / 100.0)
copycat.coderack:142:             bin = self.bins[index]
copycat.coderack:143:         bin.add(codelet)
copycat.coderack:41:         self.codelets.append(codelet)
copycat.coderack:42:         codelet.bin = self
copycat.coderack:144:         codelet.timestamp = self.time
copycat.coderack:146:         return removed_codelet
copycat.run:76:             if deleted != None:
copycat.run:74:         for codelet, urgency in codelets:
copycat.run:75:             deleted = self.coderack.post(codelet, urgency)
copycat.coderack:131:         removed_codelet = None
copycat.coderack:132:         codelets = self.codelets()
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.coderack:133:         if len(codelets) == self.max_codelets:
copycat.coderack:138:         if urgency >= 100:
copycat.coderack:141:             index = int((len(self.bins) * urgency) / 100.0)
copycat.coderack:142:             bin = self.bins[index]
copycat.coderack:143:         bin.add(codelet)
copycat.coderack:41:         self.codelets.append(codelet)
copycat.coderack:42:         codelet.bin = self
copycat.coderack:144:         codelet.timestamp = self.time
copycat.coderack:146:         return removed_codelet
copycat.run:76:             if deleted != None:
copycat.run:74:         for codelet, urgency in codelets:
copycat.run:79:         self.slipnet.update()
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:332:                     full_activation_probability = (node.activation / 100.0) ** 3
copycat.slipnet:333:                     if toolbox.flip_coin(full_activation_probability):
copycat.toolbox:87:     if prob_of_true >= 1:
copycat.toolbox:88:         return True
copycat.slipnet:334:                         node.activation = 100
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:332:                     full_activation_probability = (node.activation / 100.0) ** 3
copycat.slipnet:333:                     if toolbox.flip_coin(full_activation_probability):
copycat.toolbox:87:     if prob_of_true >= 1:
copycat.toolbox:88:         return True
copycat.slipnet:334:                         node.activation = 100
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:332:                     full_activation_probability = (node.activation / 100.0) ** 3
copycat.slipnet:333:                     if toolbox.flip_coin(full_activation_probability):
copycat.toolbox:87:     if prob_of_true >= 1:
copycat.toolbox:88:         return True
copycat.slipnet:334:                         node.activation = 100
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:332:                     full_activation_probability = (node.activation / 100.0) ** 3
copycat.slipnet:333:                     if toolbox.flip_coin(full_activation_probability):
copycat.toolbox:87:     if prob_of_true >= 1:
copycat.toolbox:88:         return True
copycat.slipnet:334:                         node.activation = 100
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:332:                     full_activation_probability = (node.activation / 100.0) ** 3
copycat.slipnet:333:                     if toolbox.flip_coin(full_activation_probability):
copycat.toolbox:87:     if prob_of_true >= 1:
copycat.toolbox:88:         return True
copycat.slipnet:334:                         node.activation = 100
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:332:                     full_activation_probability = (node.activation / 100.0) ** 3
copycat.slipnet:333:                     if toolbox.flip_coin(full_activation_probability):
copycat.toolbox:87:     if prob_of_true >= 1:
copycat.toolbox:88:         return True
copycat.slipnet:334:                         node.activation = 100
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:332:                     full_activation_probability = (node.activation / 100.0) ** 3
copycat.slipnet:333:                     if toolbox.flip_coin(full_activation_probability):
copycat.toolbox:87:     if prob_of_true >= 1:
copycat.toolbox:88:         return True
copycat.slipnet:334:                         node.activation = 100
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:332:                     full_activation_probability = (node.activation / 100.0) ** 3
copycat.slipnet:333:                     if toolbox.flip_coin(full_activation_probability):
copycat.toolbox:87:     if prob_of_true >= 1:
copycat.toolbox:88:         return True
copycat.slipnet:334:                         node.activation = 100
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:332:                     full_activation_probability = (node.activation / 100.0) ** 3
copycat.slipnet:333:                     if toolbox.flip_coin(full_activation_probability):
copycat.toolbox:87:     if prob_of_true >= 1:
copycat.toolbox:88:         return True
copycat.slipnet:334:                         node.activation = 100
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:332:                     full_activation_probability = (node.activation / 100.0) ** 3
copycat.slipnet:333:                     if toolbox.flip_coin(full_activation_probability):
copycat.toolbox:87:     if prob_of_true >= 1:
copycat.toolbox:88:         return True
copycat.slipnet:334:                         node.activation = 100
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:


#### ADD INITIAL CODELETS


copycat.run:37:         if self.coderack.is_empty():
copycat.coderack:122:         return self.urgency_sum() == 0
copycat.coderack:166:         return sum([bin.urgency_sum(self.temperature) for bin in self.bins])
copycat.coderack:69:         return len(self.codelets) * self.urgency(temperature)
copycat.coderack:65:         return round((self.urgency_code + 1) ** ((110 - temperature) / 15))
copycat.coderack:166:         return sum([bin.urgency_sum(self.temperature) for bin in self.bins])
copycat.coderack:69:         return len(self.codelets) * self.urgency(temperature)
copycat.coderack:65:         return round((self.urgency_code + 1) ** ((110 - temperature) / 15))
copycat.coderack:166:         return sum([bin.urgency_sum(self.temperature) for bin in self.bins])
copycat.coderack:69:         return len(self.codelets) * self.urgency(temperature)
copycat.coderack:65:         return round((self.urgency_code + 1) ** ((110 - temperature) / 15))
copycat.coderack:166:         return sum([bin.urgency_sum(self.temperature) for bin in self.bins])
copycat.coderack:69:         return len(self.codelets) * self.urgency(temperature)
copycat.coderack:65:         return round((self.urgency_code + 1) ** ((110 - temperature) / 15))
copycat.coderack:166:         return sum([bin.urgency_sum(self.temperature) for bin in self.bins])
copycat.coderack:69:         return len(self.codelets) * self.urgency(temperature)
copycat.coderack:65:         return round((self.urgency_code + 1) ** ((110 - temperature) / 15))
copycat.coderack:166:         return sum([bin.urgency_sum(self.temperature) for bin in self.bins])
copycat.coderack:69:         return len(self.codelets) * self.urgency(temperature)
copycat.coderack:65:         return round((self.urgency_code + 1) ** ((110 - temperature) / 15))
copycat.coderack:166:         return sum([bin.urgency_sum(self.temperature) for bin in self.bins])
copycat.coderack:69:         return len(self.codelets) * self.urgency(temperature)
copycat.coderack:65:         return round((self.urgency_code + 1) ** ((110 - temperature) / 15))
copycat.coderack:166:         return sum([bin.urgency_sum(self.temperature) for bin in self.bins])


#### CHOOSE FIRST CODELET


copycat.run:45:         self.run_codelet(self.coderack.choose())
copycat.coderack:104:         if self.is_empty():
copycat.coderack:122:         return self.urgency_sum() == 0
copycat.coderack:166:         return sum([bin.urgency_sum(self.temperature) for bin in self.bins])
copycat.coderack:69:         return len(self.codelets) * self.urgency(temperature)
copycat.coderack:65:         return round((self.urgency_code + 1) ** ((110 - temperature) / 15))
copycat.coderack:166:         return sum([bin.urgency_sum(self.temperature) for bin in self.bins])
copycat.coderack:69:         return len(self.codelets) * self.urgency(temperature)
copycat.coderack:65:         return round((self.urgency_code + 1) ** ((110 - temperature) / 15))
copycat.coderack:166:         return sum([bin.urgency_sum(self.temperature) for bin in self.bins])
copycat.coderack:69:         return len(self.codelets) * self.urgency(temperature)
copycat.coderack:65:         return round((self.urgency_code + 1) ** ((110 - temperature) / 15))
copycat.coderack:166:         return sum([bin.urgency_sum(self.temperature) for bin in self.bins])
copycat.coderack:69:         return len(self.codelets) * self.urgency(temperature)
copycat.coderack:65:         return round((self.urgency_code + 1) ** ((110 - temperature) / 15))
copycat.coderack:166:         return sum([bin.urgency_sum(self.temperature) for bin in self.bins])
copycat.coderack:69:         return len(self.codelets) * self.urgency(temperature)
copycat.coderack:65:         return round((self.urgency_code + 1) ** ((110 - temperature) / 15))
copycat.coderack:166:         return sum([bin.urgency_sum(self.temperature) for bin in self.bins])
copycat.coderack:69:         return len(self.codelets) * self.urgency(temperature)
copycat.coderack:65:         return round((self.urgency_code + 1) ** ((110 - temperature) / 15))
copycat.coderack:166:         return sum([bin.urgency_sum(self.temperature) for bin in self.bins])
copycat.coderack:69:         return len(self.codelets) * self.urgency(temperature)
copycat.coderack:65:         return round((self.urgency_code + 1) ** ((110 - temperature) / 15))
copycat.coderack:166:         return sum([bin.urgency_sum(self.temperature) for bin in self.bins])
copycat.coderack:106:         urgencies = [bin.urgency_sum(self.temperature) for bin in self.bins]
copycat.coderack:69:         return len(self.codelets) * self.urgency(temperature)
copycat.coderack:65:         return round((self.urgency_code + 1) ** ((110 - temperature) / 15))
copycat.coderack:106:         urgencies = [bin.urgency_sum(self.temperature) for bin in self.bins]
copycat.coderack:69:         return len(self.codelets) * self.urgency(temperature)
copycat.coderack:65:         return round((self.urgency_code + 1) ** ((110 - temperature) / 15))
copycat.coderack:106:         urgencies = [bin.urgency_sum(self.temperature) for bin in self.bins]
copycat.coderack:69:         return len(self.codelets) * self.urgency(temperature)
copycat.coderack:65:         return round((self.urgency_code + 1) ** ((110 - temperature) / 15))
copycat.coderack:106:         urgencies = [bin.urgency_sum(self.temperature) for bin in self.bins]
copycat.coderack:69:         return len(self.codelets) * self.urgency(temperature)
copycat.coderack:65:         return round((self.urgency_code + 1) ** ((110 - temperature) / 15))
copycat.coderack:106:         urgencies = [bin.urgency_sum(self.temperature) for bin in self.bins]
copycat.coderack:69:         return len(self.codelets) * self.urgency(temperature)
copycat.coderack:65:         return round((self.urgency_code + 1) ** ((110 - temperature) / 15))
copycat.coderack:106:         urgencies = [bin.urgency_sum(self.temperature) for bin in self.bins]
copycat.coderack:69:         return len(self.codelets) * self.urgency(temperature)
copycat.coderack:65:         return round((self.urgency_code + 1) ** ((110 - temperature) / 15))
copycat.coderack:106:         urgencies = [bin.urgency_sum(self.temperature) for bin in self.bins]
copycat.coderack:69:         return len(self.codelets) * self.urgency(temperature)
copycat.coderack:65:         return round((self.urgency_code + 1) ** ((110 - temperature) / 15))
copycat.coderack:106:         urgencies = [bin.urgency_sum(self.temperature) for bin in self.bins]
copycat.coderack:107:         bin = toolbox.weighted_select(urgencies, self.bins)
copycat.toolbox:48:     if items:
copycat.toolbox:49:         return items[weighted_index(weights)]
copycat.toolbox:32:     total = sum(weights)
copycat.toolbox:33:     if total <= 0:
copycat.toolbox:35:     value = random.randint(0, total - 1)
copycat.toolbox:36:     new_total = 0
copycat.toolbox:37:     index = 0
copycat.toolbox:38:     for weight in weights:
copycat.toolbox:39:         new_total += weight
copycat.toolbox:40:         index += 1
copycat.toolbox:41:         if new_total > value:
copycat.toolbox:38:     for weight in weights:
copycat.toolbox:39:         new_total += weight
copycat.toolbox:40:         index += 1
copycat.toolbox:41:         if new_total > value:
copycat.toolbox:38:     for weight in weights:
copycat.toolbox:39:         new_total += weight
copycat.toolbox:40:         index += 1
copycat.toolbox:41:         if new_total > value:
copycat.toolbox:42:             return index - 1
copycat.coderack:108:         self.time += 1
copycat.coderack:109:         return bin.choose()
copycat.coderack:46:         codelet = random.choice(self.codelets)
copycat.coderack:47:         self.remove(codelet)
copycat.coderack:56:         if codelet in self.codelets:
copycat.coderack:57:             self.codelets.remove(codelet)
copycat.coderack:48:         return codelet


#### RUN FIRST CODELET


copycat.run:52:         codelets = codelet.run(self.coderack, self.slipnet, self.workspace)
copycat.coderack.codelets.group:378:         string = workspace.random_string()
copycat.workspace:600:         return random.choice([self.initial_string, self.target_string])
copycat.coderack.codelets.group:381:         if not string.bonds():
copycat.workspace.string:97:         bs = [b for b in toolbox.flatten(self.from_to_bonds) if b]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.workspace.string:97:         bs = [b for b in toolbox.flatten(self.from_to_bonds) if b]
copycat.workspace.string:97:         bs = [b for b in toolbox.flatten(self.from_to_bonds) if b]
copycat.workspace.string:97:         bs = [b for b in toolbox.flatten(self.from_to_bonds) if b]
copycat.workspace.string:97:         bs = [b for b in toolbox.flatten(self.from_to_bonds) if b]
copycat.workspace.string:97:         bs = [b for b in toolbox.flatten(self.from_to_bonds) if b]
copycat.workspace.string:97:         bs = [b for b in toolbox.flatten(self.from_to_bonds) if b]
copycat.workspace.string:97:         bs = [b for b in toolbox.flatten(self.from_to_bonds) if b]
copycat.workspace.string:97:         bs = [b for b in toolbox.flatten(self.from_to_bonds) if b]
copycat.workspace.string:97:         bs = [b for b in toolbox.flatten(self.from_to_bonds) if b]
copycat.workspace.string:98:         return list(set(bs))
copycat.coderack.codelets.group:382:             return
copycat.run:53:         if not codelets:
copycat.run:54:             return
copycat.run:47:         if self.workspace.translated_rule:
