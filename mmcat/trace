abc abd ijk 42 --trace
truncated at the end of the first Run.step()
Using this to decide what next to check for accuracy.


#### INIT WORKSPACE


copycat.run:29:         self.workspace = Workspace(initial, modified, target)
copycat.workspace:40:         self.initial_string = String(self, initial)
copycat.workspace.string:29:         self.workspace = workspace
copycat.workspace.string:30:         self.highest_string_number = -1
copycat.workspace.string:31:         self.name = string
copycat.workspace.string:32:         self.length = len(string)
copycat.workspace.string:33:         self.object_spaces = self.length
copycat.workspace.string:34:         self.letters = array(self.length)
copycat.workspace.string:23:     if height == 0:
copycat.workspace.string:24:         return [None for i in range(width)]
copycat.workspace.string:24:         return [None for i in range(width)]
copycat.workspace.string:24:         return [None for i in range(width)]
copycat.workspace.string:24:         return [None for i in range(width)]
copycat.workspace.string:35:         self.groups = array(self.length)
copycat.workspace.string:23:     if height == 0:
copycat.workspace.string:24:         return [None for i in range(width)]
copycat.workspace.string:24:         return [None for i in range(width)]
copycat.workspace.string:24:         return [None for i in range(width)]
copycat.workspace.string:24:         return [None for i in range(width)]
copycat.workspace.string:36:         self.object_positions = array(self.length)
copycat.workspace.string:23:     if height == 0:
copycat.workspace.string:24:         return [None for i in range(width)]
copycat.workspace.string:24:         return [None for i in range(width)]
copycat.workspace.string:24:         return [None for i in range(width)]
copycat.workspace.string:24:         return [None for i in range(width)]
copycat.workspace.string:37:         self.proposed_bonds = array(self.length, self.length)
copycat.workspace.string:23:     if height == 0:
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:38:         self.left_right_bonds = array(self.length, self.length)
copycat.workspace.string:23:     if height == 0:
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:39:         self.from_to_bonds = array(self.length, self.length)
copycat.workspace.string:23:     if height == 0:
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:40:         self.proposed_groups = array(self.length, self.length)
copycat.workspace.string:23:     if height == 0:
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:41:         self.number_of_bonds_to_scan_distribution = range(self.length)
copycat.workspace.string:42:         self.intra_string_unhappiness = 0
copycat.workspace:41:         self.modified_string = String(self, modified)
copycat.workspace.string:29:         self.workspace = workspace
copycat.workspace.string:30:         self.highest_string_number = -1
copycat.workspace.string:31:         self.name = string
copycat.workspace.string:32:         self.length = len(string)
copycat.workspace.string:33:         self.object_spaces = self.length
copycat.workspace.string:34:         self.letters = array(self.length)
copycat.workspace.string:23:     if height == 0:
copycat.workspace.string:24:         return [None for i in range(width)]
copycat.workspace.string:24:         return [None for i in range(width)]
copycat.workspace.string:24:         return [None for i in range(width)]
copycat.workspace.string:24:         return [None for i in range(width)]
copycat.workspace.string:35:         self.groups = array(self.length)
copycat.workspace.string:23:     if height == 0:
copycat.workspace.string:24:         return [None for i in range(width)]
copycat.workspace.string:24:         return [None for i in range(width)]
copycat.workspace.string:24:         return [None for i in range(width)]
copycat.workspace.string:24:         return [None for i in range(width)]
copycat.workspace.string:36:         self.object_positions = array(self.length)
copycat.workspace.string:23:     if height == 0:
copycat.workspace.string:24:         return [None for i in range(width)]
copycat.workspace.string:24:         return [None for i in range(width)]
copycat.workspace.string:24:         return [None for i in range(width)]
copycat.workspace.string:24:         return [None for i in range(width)]
copycat.workspace.string:37:         self.proposed_bonds = array(self.length, self.length)
copycat.workspace.string:23:     if height == 0:
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:38:         self.left_right_bonds = array(self.length, self.length)
copycat.workspace.string:23:     if height == 0:
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:39:         self.from_to_bonds = array(self.length, self.length)
copycat.workspace.string:23:     if height == 0:
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:40:         self.proposed_groups = array(self.length, self.length)
copycat.workspace.string:23:     if height == 0:
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:41:         self.number_of_bonds_to_scan_distribution = range(self.length)
copycat.workspace.string:42:         self.intra_string_unhappiness = 0
copycat.workspace:42:         self.target_string = String(self, target)
copycat.workspace.string:29:         self.workspace = workspace
copycat.workspace.string:30:         self.highest_string_number = -1
copycat.workspace.string:31:         self.name = string
copycat.workspace.string:32:         self.length = len(string)
copycat.workspace.string:33:         self.object_spaces = self.length
copycat.workspace.string:34:         self.letters = array(self.length)
copycat.workspace.string:23:     if height == 0:
copycat.workspace.string:24:         return [None for i in range(width)]
copycat.workspace.string:24:         return [None for i in range(width)]
copycat.workspace.string:24:         return [None for i in range(width)]
copycat.workspace.string:24:         return [None for i in range(width)]
copycat.workspace.string:35:         self.groups = array(self.length)
copycat.workspace.string:23:     if height == 0:
copycat.workspace.string:24:         return [None for i in range(width)]
copycat.workspace.string:24:         return [None for i in range(width)]
copycat.workspace.string:24:         return [None for i in range(width)]
copycat.workspace.string:24:         return [None for i in range(width)]
copycat.workspace.string:36:         self.object_positions = array(self.length)
copycat.workspace.string:23:     if height == 0:
copycat.workspace.string:24:         return [None for i in range(width)]
copycat.workspace.string:24:         return [None for i in range(width)]
copycat.workspace.string:24:         return [None for i in range(width)]
copycat.workspace.string:24:         return [None for i in range(width)]
copycat.workspace.string:37:         self.proposed_bonds = array(self.length, self.length)
copycat.workspace.string:23:     if height == 0:
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:38:         self.left_right_bonds = array(self.length, self.length)
copycat.workspace.string:23:     if height == 0:
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:39:         self.from_to_bonds = array(self.length, self.length)
copycat.workspace.string:23:     if height == 0:
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:40:         self.proposed_groups = array(self.length, self.length)
copycat.workspace.string:23:     if height == 0:
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:25:     return [[None for i in range(width)] for j in range(height)]
copycat.workspace.string:41:         self.number_of_bonds_to_scan_distribution = range(self.length)
copycat.workspace.string:42:         self.intra_string_unhappiness = 0
copycat.workspace:43:         self.answer_string = None
copycat.workspace:45:         self.activation = 100
copycat.workspace:46:         self.temperature = 0
copycat.workspace:47:         self.clamp_temperature = False
copycat.workspace:49:         self.replacements = []
copycat.workspace:50:         self._correspondences = []
copycat.workspace:51:         self._proposed_correspondences = {}
copycat.workspace:53:         self.rule = None
copycat.workspace:54:         self.translated_rule = None
copycat.workspace:56:         self.snag_object = None
copycat.workspace:57:         self.snag_condition = None
copycat.workspace:58:         self.snag_count = 0
copycat.workspace:59:         self.last_snag_time = 0
copycat.workspace:60:         self.snag_structures = []
copycat.workspace:63:         if self.initial_string.length == 1 or self.target_string == 1:
copycat.workspace:67:         for string in [self.initial_string, self.modified_string, self.target_string]:
copycat.workspace:68:             count = 0
copycat.workspace:69:             for character in string.name:
copycat.workspace:70:                 letter_category = slipnet.get_plato_letter(character)
copycat.slipnet:288:     index = string.ascii_lowercase.find(str(character))
copycat.slipnet:289:     return slipnet_letters[index]
copycat.workspace:71:                 letter = Letter(character, string, letter_category, count)
copycat.workspace.letter:21:         super(Letter, self).__init__()
copycat.workspace.wobject:22:         self.string = None
copycat.workspace.wobject:23:         self.string_number = None
copycat.workspace.wobject:24:         self.left_string_position = None
copycat.workspace.wobject:25:         self.right_string_position = None
copycat.workspace.wobject:26:         self.raw_importance = 0
copycat.workspace.wobject:27:         self.relative_importance = 0
copycat.workspace.wobject:28:         self.intra_string_happiness = 0
copycat.workspace.wobject:29:         self.intra_string_unhappiness = 0
copycat.workspace.wobject:30:         self.inter_string_happiness = 0
copycat.workspace.wobject:31:         self.inter_string_unhappiness = 0
copycat.workspace.wobject:32:         self.total_happiness = 0
copycat.workspace.wobject:33:         self.total_unhappiness = 0
copycat.workspace.wobject:34:         self.intra_string_salience = 0
copycat.workspace.wobject:35:         self.inter_string_salience = 0
copycat.workspace.wobject:36:         self.total_salience = 0
copycat.workspace.wobject:37:         self.descriptions = []
copycat.workspace.wobject:38:         self.extrinsic_descriptions = []
copycat.workspace.wobject:39:         self.outgoing_bonds = []
copycat.workspace.wobject:40:         self.incoming_bonds = []
copycat.workspace.wobject:41:         self.left_bond = None
copycat.workspace.wobject:42:         self.right_bond = None
copycat.workspace.wobject:43:         self.group = None
copycat.workspace.wobject:44:         self.replacement = None
copycat.workspace.wobject:45:         self.correspondence = None
copycat.workspace.wobject:46:         self.is_changed = False
copycat.workspace.wobject:47:         self.is_new_answer_letter = False
copycat.workspace.wobject:48:         self.clamp_salience = False
copycat.workspace.letter:22:         self.type_name = 'letter'
copycat.workspace.letter:23:         self.groups = None
copycat.workspace.letter:24:         self.bonds = None
copycat.workspace.letter:25:         self.name = name
copycat.workspace.letter:26:         self.string = string
copycat.workspace.letter:27:         self.left_string_position = string_position
copycat.workspace.letter:28:         self.right_string_position = string_position
copycat.workspace:72:                 string.add_letter(letter)
copycat.workspace.string:119:         self.highest_string_number += 1
copycat.workspace.string:120:         letter.string_number = self.highest_string_number
copycat.workspace.string:121:         position = letter.left_string_position
copycat.workspace.string:122:         self.letters[position] = letter
copycat.workspace.string:123:         right_object = self.object_positions[position]
copycat.workspace.string:124:         self.object_positions[position] = [letter, right_object]
copycat.workspace:73:                 count += 1
copycat.workspace:69:             for character in string.name:
copycat.workspace:70:                 letter_category = slipnet.get_plato_letter(character)
copycat.slipnet:288:     index = string.ascii_lowercase.find(str(character))
copycat.slipnet:289:     return slipnet_letters[index]
copycat.workspace:71:                 letter = Letter(character, string, letter_category, count)
copycat.workspace.letter:21:         super(Letter, self).__init__()
copycat.workspace.wobject:22:         self.string = None
copycat.workspace.wobject:23:         self.string_number = None
copycat.workspace.wobject:24:         self.left_string_position = None
copycat.workspace.wobject:25:         self.right_string_position = None
copycat.workspace.wobject:26:         self.raw_importance = 0
copycat.workspace.wobject:27:         self.relative_importance = 0
copycat.workspace.wobject:28:         self.intra_string_happiness = 0
copycat.workspace.wobject:29:         self.intra_string_unhappiness = 0
copycat.workspace.wobject:30:         self.inter_string_happiness = 0
copycat.workspace.wobject:31:         self.inter_string_unhappiness = 0
copycat.workspace.wobject:32:         self.total_happiness = 0
copycat.workspace.wobject:33:         self.total_unhappiness = 0
copycat.workspace.wobject:34:         self.intra_string_salience = 0
copycat.workspace.wobject:35:         self.inter_string_salience = 0
copycat.workspace.wobject:36:         self.total_salience = 0
copycat.workspace.wobject:37:         self.descriptions = []
copycat.workspace.wobject:38:         self.extrinsic_descriptions = []
copycat.workspace.wobject:39:         self.outgoing_bonds = []
copycat.workspace.wobject:40:         self.incoming_bonds = []
copycat.workspace.wobject:41:         self.left_bond = None
copycat.workspace.wobject:42:         self.right_bond = None
copycat.workspace.wobject:43:         self.group = None
copycat.workspace.wobject:44:         self.replacement = None
copycat.workspace.wobject:45:         self.correspondence = None
copycat.workspace.wobject:46:         self.is_changed = False
copycat.workspace.wobject:47:         self.is_new_answer_letter = False
copycat.workspace.wobject:48:         self.clamp_salience = False
copycat.workspace.letter:22:         self.type_name = 'letter'
copycat.workspace.letter:23:         self.groups = None
copycat.workspace.letter:24:         self.bonds = None
copycat.workspace.letter:25:         self.name = name
copycat.workspace.letter:26:         self.string = string
copycat.workspace.letter:27:         self.left_string_position = string_position
copycat.workspace.letter:28:         self.right_string_position = string_position
copycat.workspace:72:                 string.add_letter(letter)
copycat.workspace.string:119:         self.highest_string_number += 1
copycat.workspace.string:120:         letter.string_number = self.highest_string_number
copycat.workspace.string:121:         position = letter.left_string_position
copycat.workspace.string:122:         self.letters[position] = letter
copycat.workspace.string:123:         right_object = self.object_positions[position]
copycat.workspace.string:124:         self.object_positions[position] = [letter, right_object]
copycat.workspace:73:                 count += 1
copycat.workspace:69:             for character in string.name:
copycat.workspace:70:                 letter_category = slipnet.get_plato_letter(character)
copycat.slipnet:288:     index = string.ascii_lowercase.find(str(character))
copycat.slipnet:289:     return slipnet_letters[index]
copycat.workspace:71:                 letter = Letter(character, string, letter_category, count)
copycat.workspace.letter:21:         super(Letter, self).__init__()
copycat.workspace.wobject:22:         self.string = None
copycat.workspace.wobject:23:         self.string_number = None
copycat.workspace.wobject:24:         self.left_string_position = None
copycat.workspace.wobject:25:         self.right_string_position = None
copycat.workspace.wobject:26:         self.raw_importance = 0
copycat.workspace.wobject:27:         self.relative_importance = 0
copycat.workspace.wobject:28:         self.intra_string_happiness = 0
copycat.workspace.wobject:29:         self.intra_string_unhappiness = 0
copycat.workspace.wobject:30:         self.inter_string_happiness = 0
copycat.workspace.wobject:31:         self.inter_string_unhappiness = 0
copycat.workspace.wobject:32:         self.total_happiness = 0
copycat.workspace.wobject:33:         self.total_unhappiness = 0
copycat.workspace.wobject:34:         self.intra_string_salience = 0
copycat.workspace.wobject:35:         self.inter_string_salience = 0
copycat.workspace.wobject:36:         self.total_salience = 0
copycat.workspace.wobject:37:         self.descriptions = []
copycat.workspace.wobject:38:         self.extrinsic_descriptions = []
copycat.workspace.wobject:39:         self.outgoing_bonds = []
copycat.workspace.wobject:40:         self.incoming_bonds = []
copycat.workspace.wobject:41:         self.left_bond = None
copycat.workspace.wobject:42:         self.right_bond = None
copycat.workspace.wobject:43:         self.group = None
copycat.workspace.wobject:44:         self.replacement = None
copycat.workspace.wobject:45:         self.correspondence = None
copycat.workspace.wobject:46:         self.is_changed = False
copycat.workspace.wobject:47:         self.is_new_answer_letter = False
copycat.workspace.wobject:48:         self.clamp_salience = False
copycat.workspace.letter:22:         self.type_name = 'letter'
copycat.workspace.letter:23:         self.groups = None
copycat.workspace.letter:24:         self.bonds = None
copycat.workspace.letter:25:         self.name = name
copycat.workspace.letter:26:         self.string = string
copycat.workspace.letter:27:         self.left_string_position = string_position
copycat.workspace.letter:28:         self.right_string_position = string_position
copycat.workspace:72:                 string.add_letter(letter)
copycat.workspace.string:119:         self.highest_string_number += 1
copycat.workspace.string:120:         letter.string_number = self.highest_string_number
copycat.workspace.string:121:         position = letter.left_string_position
copycat.workspace.string:122:         self.letters[position] = letter
copycat.workspace.string:123:         right_object = self.object_positions[position]
copycat.workspace.string:124:         self.object_positions[position] = [letter, right_object]
copycat.workspace:73:                 count += 1
copycat.workspace:69:             for character in string.name:
copycat.workspace:67:         for string in [self.initial_string, self.modified_string, self.target_string]:
copycat.workspace:68:             count = 0
copycat.workspace:69:             for character in string.name:
copycat.workspace:70:                 letter_category = slipnet.get_plato_letter(character)
copycat.slipnet:288:     index = string.ascii_lowercase.find(str(character))
copycat.slipnet:289:     return slipnet_letters[index]
copycat.workspace:71:                 letter = Letter(character, string, letter_category, count)
copycat.workspace.letter:21:         super(Letter, self).__init__()
copycat.workspace.wobject:22:         self.string = None
copycat.workspace.wobject:23:         self.string_number = None
copycat.workspace.wobject:24:         self.left_string_position = None
copycat.workspace.wobject:25:         self.right_string_position = None
copycat.workspace.wobject:26:         self.raw_importance = 0
copycat.workspace.wobject:27:         self.relative_importance = 0
copycat.workspace.wobject:28:         self.intra_string_happiness = 0
copycat.workspace.wobject:29:         self.intra_string_unhappiness = 0
copycat.workspace.wobject:30:         self.inter_string_happiness = 0
copycat.workspace.wobject:31:         self.inter_string_unhappiness = 0
copycat.workspace.wobject:32:         self.total_happiness = 0
copycat.workspace.wobject:33:         self.total_unhappiness = 0
copycat.workspace.wobject:34:         self.intra_string_salience = 0
copycat.workspace.wobject:35:         self.inter_string_salience = 0
copycat.workspace.wobject:36:         self.total_salience = 0
copycat.workspace.wobject:37:         self.descriptions = []
copycat.workspace.wobject:38:         self.extrinsic_descriptions = []
copycat.workspace.wobject:39:         self.outgoing_bonds = []
copycat.workspace.wobject:40:         self.incoming_bonds = []
copycat.workspace.wobject:41:         self.left_bond = None
copycat.workspace.wobject:42:         self.right_bond = None
copycat.workspace.wobject:43:         self.group = None
copycat.workspace.wobject:44:         self.replacement = None
copycat.workspace.wobject:45:         self.correspondence = None
copycat.workspace.wobject:46:         self.is_changed = False
copycat.workspace.wobject:47:         self.is_new_answer_letter = False
copycat.workspace.wobject:48:         self.clamp_salience = False
copycat.workspace.letter:22:         self.type_name = 'letter'
copycat.workspace.letter:23:         self.groups = None
copycat.workspace.letter:24:         self.bonds = None
copycat.workspace.letter:25:         self.name = name
copycat.workspace.letter:26:         self.string = string
copycat.workspace.letter:27:         self.left_string_position = string_position
copycat.workspace.letter:28:         self.right_string_position = string_position
copycat.workspace:72:                 string.add_letter(letter)
copycat.workspace.string:119:         self.highest_string_number += 1
copycat.workspace.string:120:         letter.string_number = self.highest_string_number
copycat.workspace.string:121:         position = letter.left_string_position
copycat.workspace.string:122:         self.letters[position] = letter
copycat.workspace.string:123:         right_object = self.object_positions[position]
copycat.workspace.string:124:         self.object_positions[position] = [letter, right_object]
copycat.workspace:73:                 count += 1
copycat.workspace:69:             for character in string.name:
copycat.workspace:70:                 letter_category = slipnet.get_plato_letter(character)
copycat.slipnet:288:     index = string.ascii_lowercase.find(str(character))
copycat.slipnet:289:     return slipnet_letters[index]
copycat.workspace:71:                 letter = Letter(character, string, letter_category, count)
copycat.workspace.letter:21:         super(Letter, self).__init__()
copycat.workspace.wobject:22:         self.string = None
copycat.workspace.wobject:23:         self.string_number = None
copycat.workspace.wobject:24:         self.left_string_position = None
copycat.workspace.wobject:25:         self.right_string_position = None
copycat.workspace.wobject:26:         self.raw_importance = 0
copycat.workspace.wobject:27:         self.relative_importance = 0
copycat.workspace.wobject:28:         self.intra_string_happiness = 0
copycat.workspace.wobject:29:         self.intra_string_unhappiness = 0
copycat.workspace.wobject:30:         self.inter_string_happiness = 0
copycat.workspace.wobject:31:         self.inter_string_unhappiness = 0
copycat.workspace.wobject:32:         self.total_happiness = 0
copycat.workspace.wobject:33:         self.total_unhappiness = 0
copycat.workspace.wobject:34:         self.intra_string_salience = 0
copycat.workspace.wobject:35:         self.inter_string_salience = 0
copycat.workspace.wobject:36:         self.total_salience = 0
copycat.workspace.wobject:37:         self.descriptions = []
copycat.workspace.wobject:38:         self.extrinsic_descriptions = []
copycat.workspace.wobject:39:         self.outgoing_bonds = []
copycat.workspace.wobject:40:         self.incoming_bonds = []
copycat.workspace.wobject:41:         self.left_bond = None
copycat.workspace.wobject:42:         self.right_bond = None
copycat.workspace.wobject:43:         self.group = None
copycat.workspace.wobject:44:         self.replacement = None
copycat.workspace.wobject:45:         self.correspondence = None
copycat.workspace.wobject:46:         self.is_changed = False
copycat.workspace.wobject:47:         self.is_new_answer_letter = False
copycat.workspace.wobject:48:         self.clamp_salience = False
copycat.workspace.letter:22:         self.type_name = 'letter'
copycat.workspace.letter:23:         self.groups = None
copycat.workspace.letter:24:         self.bonds = None
copycat.workspace.letter:25:         self.name = name
copycat.workspace.letter:26:         self.string = string
copycat.workspace.letter:27:         self.left_string_position = string_position
copycat.workspace.letter:28:         self.right_string_position = string_position
copycat.workspace:72:                 string.add_letter(letter)
copycat.workspace.string:119:         self.highest_string_number += 1
copycat.workspace.string:120:         letter.string_number = self.highest_string_number
copycat.workspace.string:121:         position = letter.left_string_position
copycat.workspace.string:122:         self.letters[position] = letter
copycat.workspace.string:123:         right_object = self.object_positions[position]
copycat.workspace.string:124:         self.object_positions[position] = [letter, right_object]
copycat.workspace:73:                 count += 1
copycat.workspace:69:             for character in string.name:
copycat.workspace:70:                 letter_category = slipnet.get_plato_letter(character)
copycat.slipnet:288:     index = string.ascii_lowercase.find(str(character))
copycat.slipnet:289:     return slipnet_letters[index]
copycat.workspace:71:                 letter = Letter(character, string, letter_category, count)
copycat.workspace.letter:21:         super(Letter, self).__init__()
copycat.workspace.wobject:22:         self.string = None
copycat.workspace.wobject:23:         self.string_number = None
copycat.workspace.wobject:24:         self.left_string_position = None
copycat.workspace.wobject:25:         self.right_string_position = None
copycat.workspace.wobject:26:         self.raw_importance = 0
copycat.workspace.wobject:27:         self.relative_importance = 0
copycat.workspace.wobject:28:         self.intra_string_happiness = 0
copycat.workspace.wobject:29:         self.intra_string_unhappiness = 0
copycat.workspace.wobject:30:         self.inter_string_happiness = 0
copycat.workspace.wobject:31:         self.inter_string_unhappiness = 0
copycat.workspace.wobject:32:         self.total_happiness = 0
copycat.workspace.wobject:33:         self.total_unhappiness = 0
copycat.workspace.wobject:34:         self.intra_string_salience = 0
copycat.workspace.wobject:35:         self.inter_string_salience = 0
copycat.workspace.wobject:36:         self.total_salience = 0
copycat.workspace.wobject:37:         self.descriptions = []
copycat.workspace.wobject:38:         self.extrinsic_descriptions = []
copycat.workspace.wobject:39:         self.outgoing_bonds = []
copycat.workspace.wobject:40:         self.incoming_bonds = []
copycat.workspace.wobject:41:         self.left_bond = None
copycat.workspace.wobject:42:         self.right_bond = None
copycat.workspace.wobject:43:         self.group = None
copycat.workspace.wobject:44:         self.replacement = None
copycat.workspace.wobject:45:         self.correspondence = None
copycat.workspace.wobject:46:         self.is_changed = False
copycat.workspace.wobject:47:         self.is_new_answer_letter = False
copycat.workspace.wobject:48:         self.clamp_salience = False
copycat.workspace.letter:22:         self.type_name = 'letter'
copycat.workspace.letter:23:         self.groups = None
copycat.workspace.letter:24:         self.bonds = None
copycat.workspace.letter:25:         self.name = name
copycat.workspace.letter:26:         self.string = string
copycat.workspace.letter:27:         self.left_string_position = string_position
copycat.workspace.letter:28:         self.right_string_position = string_position
copycat.workspace:72:                 string.add_letter(letter)
copycat.workspace.string:119:         self.highest_string_number += 1
copycat.workspace.string:120:         letter.string_number = self.highest_string_number
copycat.workspace.string:121:         position = letter.left_string_position
copycat.workspace.string:122:         self.letters[position] = letter
copycat.workspace.string:123:         right_object = self.object_positions[position]
copycat.workspace.string:124:         self.object_positions[position] = [letter, right_object]
copycat.workspace:73:                 count += 1
copycat.workspace:69:             for character in string.name:
copycat.workspace:67:         for string in [self.initial_string, self.modified_string, self.target_string]:
copycat.workspace:68:             count = 0
copycat.workspace:69:             for character in string.name:
copycat.workspace:70:                 letter_category = slipnet.get_plato_letter(character)
copycat.slipnet:288:     index = string.ascii_lowercase.find(str(character))
copycat.slipnet:289:     return slipnet_letters[index]
copycat.workspace:71:                 letter = Letter(character, string, letter_category, count)
copycat.workspace.letter:21:         super(Letter, self).__init__()
copycat.workspace.wobject:22:         self.string = None
copycat.workspace.wobject:23:         self.string_number = None
copycat.workspace.wobject:24:         self.left_string_position = None
copycat.workspace.wobject:25:         self.right_string_position = None
copycat.workspace.wobject:26:         self.raw_importance = 0
copycat.workspace.wobject:27:         self.relative_importance = 0
copycat.workspace.wobject:28:         self.intra_string_happiness = 0
copycat.workspace.wobject:29:         self.intra_string_unhappiness = 0
copycat.workspace.wobject:30:         self.inter_string_happiness = 0
copycat.workspace.wobject:31:         self.inter_string_unhappiness = 0
copycat.workspace.wobject:32:         self.total_happiness = 0
copycat.workspace.wobject:33:         self.total_unhappiness = 0
copycat.workspace.wobject:34:         self.intra_string_salience = 0
copycat.workspace.wobject:35:         self.inter_string_salience = 0
copycat.workspace.wobject:36:         self.total_salience = 0
copycat.workspace.wobject:37:         self.descriptions = []
copycat.workspace.wobject:38:         self.extrinsic_descriptions = []
copycat.workspace.wobject:39:         self.outgoing_bonds = []
copycat.workspace.wobject:40:         self.incoming_bonds = []
copycat.workspace.wobject:41:         self.left_bond = None
copycat.workspace.wobject:42:         self.right_bond = None
copycat.workspace.wobject:43:         self.group = None
copycat.workspace.wobject:44:         self.replacement = None
copycat.workspace.wobject:45:         self.correspondence = None
copycat.workspace.wobject:46:         self.is_changed = False
copycat.workspace.wobject:47:         self.is_new_answer_letter = False
copycat.workspace.wobject:48:         self.clamp_salience = False
copycat.workspace.letter:22:         self.type_name = 'letter'
copycat.workspace.letter:23:         self.groups = None
copycat.workspace.letter:24:         self.bonds = None
copycat.workspace.letter:25:         self.name = name
copycat.workspace.letter:26:         self.string = string
copycat.workspace.letter:27:         self.left_string_position = string_position
copycat.workspace.letter:28:         self.right_string_position = string_position
copycat.workspace:72:                 string.add_letter(letter)
copycat.workspace.string:119:         self.highest_string_number += 1
copycat.workspace.string:120:         letter.string_number = self.highest_string_number
copycat.workspace.string:121:         position = letter.left_string_position
copycat.workspace.string:122:         self.letters[position] = letter
copycat.workspace.string:123:         right_object = self.object_positions[position]
copycat.workspace.string:124:         self.object_positions[position] = [letter, right_object]
copycat.workspace:73:                 count += 1
copycat.workspace:69:             for character in string.name:
copycat.workspace:70:                 letter_category = slipnet.get_plato_letter(character)
copycat.slipnet:288:     index = string.ascii_lowercase.find(str(character))
copycat.slipnet:289:     return slipnet_letters[index]
copycat.workspace:71:                 letter = Letter(character, string, letter_category, count)
copycat.workspace.letter:21:         super(Letter, self).__init__()
copycat.workspace.wobject:22:         self.string = None
copycat.workspace.wobject:23:         self.string_number = None
copycat.workspace.wobject:24:         self.left_string_position = None
copycat.workspace.wobject:25:         self.right_string_position = None
copycat.workspace.wobject:26:         self.raw_importance = 0
copycat.workspace.wobject:27:         self.relative_importance = 0
copycat.workspace.wobject:28:         self.intra_string_happiness = 0
copycat.workspace.wobject:29:         self.intra_string_unhappiness = 0
copycat.workspace.wobject:30:         self.inter_string_happiness = 0
copycat.workspace.wobject:31:         self.inter_string_unhappiness = 0
copycat.workspace.wobject:32:         self.total_happiness = 0
copycat.workspace.wobject:33:         self.total_unhappiness = 0
copycat.workspace.wobject:34:         self.intra_string_salience = 0
copycat.workspace.wobject:35:         self.inter_string_salience = 0
copycat.workspace.wobject:36:         self.total_salience = 0
copycat.workspace.wobject:37:         self.descriptions = []
copycat.workspace.wobject:38:         self.extrinsic_descriptions = []
copycat.workspace.wobject:39:         self.outgoing_bonds = []
copycat.workspace.wobject:40:         self.incoming_bonds = []
copycat.workspace.wobject:41:         self.left_bond = None
copycat.workspace.wobject:42:         self.right_bond = None
copycat.workspace.wobject:43:         self.group = None
copycat.workspace.wobject:44:         self.replacement = None
copycat.workspace.wobject:45:         self.correspondence = None
copycat.workspace.wobject:46:         self.is_changed = False
copycat.workspace.wobject:47:         self.is_new_answer_letter = False
copycat.workspace.wobject:48:         self.clamp_salience = False
copycat.workspace.letter:22:         self.type_name = 'letter'
copycat.workspace.letter:23:         self.groups = None
copycat.workspace.letter:24:         self.bonds = None
copycat.workspace.letter:25:         self.name = name
copycat.workspace.letter:26:         self.string = string
copycat.workspace.letter:27:         self.left_string_position = string_position
copycat.workspace.letter:28:         self.right_string_position = string_position
copycat.workspace:72:                 string.add_letter(letter)
copycat.workspace.string:119:         self.highest_string_number += 1
copycat.workspace.string:120:         letter.string_number = self.highest_string_number
copycat.workspace.string:121:         position = letter.left_string_position
copycat.workspace.string:122:         self.letters[position] = letter
copycat.workspace.string:123:         right_object = self.object_positions[position]
copycat.workspace.string:124:         self.object_positions[position] = [letter, right_object]
copycat.workspace:73:                 count += 1
copycat.workspace:69:             for character in string.name:
copycat.workspace:70:                 letter_category = slipnet.get_plato_letter(character)
copycat.slipnet:288:     index = string.ascii_lowercase.find(str(character))
copycat.slipnet:289:     return slipnet_letters[index]
copycat.workspace:71:                 letter = Letter(character, string, letter_category, count)
copycat.workspace.letter:21:         super(Letter, self).__init__()
copycat.workspace.wobject:22:         self.string = None
copycat.workspace.wobject:23:         self.string_number = None
copycat.workspace.wobject:24:         self.left_string_position = None
copycat.workspace.wobject:25:         self.right_string_position = None
copycat.workspace.wobject:26:         self.raw_importance = 0
copycat.workspace.wobject:27:         self.relative_importance = 0
copycat.workspace.wobject:28:         self.intra_string_happiness = 0
copycat.workspace.wobject:29:         self.intra_string_unhappiness = 0
copycat.workspace.wobject:30:         self.inter_string_happiness = 0
copycat.workspace.wobject:31:         self.inter_string_unhappiness = 0
copycat.workspace.wobject:32:         self.total_happiness = 0
copycat.workspace.wobject:33:         self.total_unhappiness = 0
copycat.workspace.wobject:34:         self.intra_string_salience = 0
copycat.workspace.wobject:35:         self.inter_string_salience = 0
copycat.workspace.wobject:36:         self.total_salience = 0
copycat.workspace.wobject:37:         self.descriptions = []
copycat.workspace.wobject:38:         self.extrinsic_descriptions = []
copycat.workspace.wobject:39:         self.outgoing_bonds = []
copycat.workspace.wobject:40:         self.incoming_bonds = []
copycat.workspace.wobject:41:         self.left_bond = None
copycat.workspace.wobject:42:         self.right_bond = None
copycat.workspace.wobject:43:         self.group = None
copycat.workspace.wobject:44:         self.replacement = None
copycat.workspace.wobject:45:         self.correspondence = None
copycat.workspace.wobject:46:         self.is_changed = False
copycat.workspace.wobject:47:         self.is_new_answer_letter = False
copycat.workspace.wobject:48:         self.clamp_salience = False
copycat.workspace.letter:22:         self.type_name = 'letter'
copycat.workspace.letter:23:         self.groups = None
copycat.workspace.letter:24:         self.bonds = None
copycat.workspace.letter:25:         self.name = name
copycat.workspace.letter:26:         self.string = string
copycat.workspace.letter:27:         self.left_string_position = string_position
copycat.workspace.letter:28:         self.right_string_position = string_position
copycat.workspace:72:                 string.add_letter(letter)
copycat.workspace.string:119:         self.highest_string_number += 1
copycat.workspace.string:120:         letter.string_number = self.highest_string_number
copycat.workspace.string:121:         position = letter.left_string_position
copycat.workspace.string:122:         self.letters[position] = letter
copycat.workspace.string:123:         right_object = self.object_positions[position]
copycat.workspace.string:124:         self.object_positions[position] = [letter, right_object]
copycat.workspace:73:                 count += 1
copycat.workspace:69:             for character in string.name:
copycat.workspace:67:         for string in [self.initial_string, self.modified_string, self.target_string]:
copycat.workspace:76:         for string in [self.initial_string, self.modified_string, self.target_string]:
copycat.workspace:77:             for letter in string.letters:
copycat.workspace:78:                 description = Description(letter,
copycat.workspace:79:                                           slipnet.plato_object_category,
copycat.workspace:80:                                           slipnet.plato_letter)
copycat.workspace.description:21:         super(Description, self).__init__()
copycat.workspace.structure:21:         self.string = None
copycat.workspace.structure:22:         self.structure_category = None
copycat.workspace.structure:23:         self.in_group = False
copycat.workspace.structure:24:         self.internal_strength = 0
copycat.workspace.structure:25:         self.external_strength = 0
copycat.workspace.structure:26:         self.total_strength = 0
copycat.workspace.structure:27:         self.proposal_level = None
copycat.workspace.description:22:         self.object = object1
copycat.workspace.description:23:         self.string = object1.string
copycat.workspace.description:24:         self.description_type = description_type
copycat.workspace.description:25:         self.descriptor = descriptor
copycat.workspace.description:26:         self.description_number = None
copycat.workspace:81:                 letter.add_description(description)
copycat.workspace.wobject:308:         description.descriptor_number = len(self.descriptions)
copycat.workspace.wobject:309:         self.descriptions.append(description)
copycat.workspace:82:                 description = Description(letter,
copycat.workspace:83:                                           slipnet.plato_letter_category,
copycat.workspace:84:                                           slipnet.get_plato_letter(letter.name))
copycat.slipnet:288:     index = string.ascii_lowercase.find(str(character))
copycat.slipnet:289:     return slipnet_letters[index]
copycat.workspace.description:21:         super(Description, self).__init__()
copycat.workspace.structure:21:         self.string = None
copycat.workspace.structure:22:         self.structure_category = None
copycat.workspace.structure:23:         self.in_group = False
copycat.workspace.structure:24:         self.internal_strength = 0
copycat.workspace.structure:25:         self.external_strength = 0
copycat.workspace.structure:26:         self.total_strength = 0
copycat.workspace.structure:27:         self.proposal_level = None
copycat.workspace.description:22:         self.object = object1
copycat.workspace.description:23:         self.string = object1.string
copycat.workspace.description:24:         self.description_type = description_type
copycat.workspace.description:25:         self.descriptor = descriptor
copycat.workspace.description:26:         self.description_number = None
copycat.workspace:85:                 letter.add_description(description)
copycat.workspace.wobject:308:         description.descriptor_number = len(self.descriptions)
copycat.workspace.wobject:309:         self.descriptions.append(description)
copycat.workspace:77:             for letter in string.letters:
copycat.workspace:78:                 description = Description(letter,
copycat.workspace:79:                                           slipnet.plato_object_category,
copycat.workspace:80:                                           slipnet.plato_letter)
copycat.workspace.description:21:         super(Description, self).__init__()
copycat.workspace.structure:21:         self.string = None
copycat.workspace.structure:22:         self.structure_category = None
copycat.workspace.structure:23:         self.in_group = False
copycat.workspace.structure:24:         self.internal_strength = 0
copycat.workspace.structure:25:         self.external_strength = 0
copycat.workspace.structure:26:         self.total_strength = 0
copycat.workspace.structure:27:         self.proposal_level = None
copycat.workspace.description:22:         self.object = object1
copycat.workspace.description:23:         self.string = object1.string
copycat.workspace.description:24:         self.description_type = description_type
copycat.workspace.description:25:         self.descriptor = descriptor
copycat.workspace.description:26:         self.description_number = None
copycat.workspace:81:                 letter.add_description(description)
copycat.workspace.wobject:308:         description.descriptor_number = len(self.descriptions)
copycat.workspace.wobject:309:         self.descriptions.append(description)
copycat.workspace:82:                 description = Description(letter,
copycat.workspace:83:                                           slipnet.plato_letter_category,
copycat.workspace:84:                                           slipnet.get_plato_letter(letter.name))
copycat.slipnet:288:     index = string.ascii_lowercase.find(str(character))
copycat.slipnet:289:     return slipnet_letters[index]
copycat.workspace.description:21:         super(Description, self).__init__()
copycat.workspace.structure:21:         self.string = None
copycat.workspace.structure:22:         self.structure_category = None
copycat.workspace.structure:23:         self.in_group = False
copycat.workspace.structure:24:         self.internal_strength = 0
copycat.workspace.structure:25:         self.external_strength = 0
copycat.workspace.structure:26:         self.total_strength = 0
copycat.workspace.structure:27:         self.proposal_level = None
copycat.workspace.description:22:         self.object = object1
copycat.workspace.description:23:         self.string = object1.string
copycat.workspace.description:24:         self.description_type = description_type
copycat.workspace.description:25:         self.descriptor = descriptor
copycat.workspace.description:26:         self.description_number = None
copycat.workspace:85:                 letter.add_description(description)
copycat.workspace.wobject:308:         description.descriptor_number = len(self.descriptions)
copycat.workspace.wobject:309:         self.descriptions.append(description)
copycat.workspace:77:             for letter in string.letters:
copycat.workspace:78:                 description = Description(letter,
copycat.workspace:79:                                           slipnet.plato_object_category,
copycat.workspace:80:                                           slipnet.plato_letter)
copycat.workspace.description:21:         super(Description, self).__init__()
copycat.workspace.structure:21:         self.string = None
copycat.workspace.structure:22:         self.structure_category = None
copycat.workspace.structure:23:         self.in_group = False
copycat.workspace.structure:24:         self.internal_strength = 0
copycat.workspace.structure:25:         self.external_strength = 0
copycat.workspace.structure:26:         self.total_strength = 0
copycat.workspace.structure:27:         self.proposal_level = None
copycat.workspace.description:22:         self.object = object1
copycat.workspace.description:23:         self.string = object1.string
copycat.workspace.description:24:         self.description_type = description_type
copycat.workspace.description:25:         self.descriptor = descriptor
copycat.workspace.description:26:         self.description_number = None
copycat.workspace:81:                 letter.add_description(description)
copycat.workspace.wobject:308:         description.descriptor_number = len(self.descriptions)
copycat.workspace.wobject:309:         self.descriptions.append(description)
copycat.workspace:82:                 description = Description(letter,
copycat.workspace:83:                                           slipnet.plato_letter_category,
copycat.workspace:84:                                           slipnet.get_plato_letter(letter.name))
copycat.slipnet:288:     index = string.ascii_lowercase.find(str(character))
copycat.slipnet:289:     return slipnet_letters[index]
copycat.workspace.description:21:         super(Description, self).__init__()
copycat.workspace.structure:21:         self.string = None
copycat.workspace.structure:22:         self.structure_category = None
copycat.workspace.structure:23:         self.in_group = False
copycat.workspace.structure:24:         self.internal_strength = 0
copycat.workspace.structure:25:         self.external_strength = 0
copycat.workspace.structure:26:         self.total_strength = 0
copycat.workspace.structure:27:         self.proposal_level = None
copycat.workspace.description:22:         self.object = object1
copycat.workspace.description:23:         self.string = object1.string
copycat.workspace.description:24:         self.description_type = description_type
copycat.workspace.description:25:         self.descriptor = descriptor
copycat.workspace.description:26:         self.description_number = None
copycat.workspace:85:                 letter.add_description(description)
copycat.workspace.wobject:308:         description.descriptor_number = len(self.descriptions)
copycat.workspace.wobject:309:         self.descriptions.append(description)
copycat.workspace:77:             for letter in string.letters:
copycat.workspace:87:             leftmost_letter = string.letters[0]
copycat.workspace:88:             if string.length > 1:
copycat.workspace:89:                 rightmost_letter = string.letters[-1]
copycat.workspace:90:                 leftmost_letter.add_description(Description(leftmost_letter,
copycat.workspace:91:                                                             slipnet.plato_string_position_category,
copycat.workspace:92:                                                             slipnet.plato_leftmost))
copycat.workspace.description:21:         super(Description, self).__init__()
copycat.workspace.structure:21:         self.string = None
copycat.workspace.structure:22:         self.structure_category = None
copycat.workspace.structure:23:         self.in_group = False
copycat.workspace.structure:24:         self.internal_strength = 0
copycat.workspace.structure:25:         self.external_strength = 0
copycat.workspace.structure:26:         self.total_strength = 0
copycat.workspace.structure:27:         self.proposal_level = None
copycat.workspace.description:22:         self.object = object1
copycat.workspace.description:23:         self.string = object1.string
copycat.workspace.description:24:         self.description_type = description_type
copycat.workspace.description:25:         self.descriptor = descriptor
copycat.workspace.description:26:         self.description_number = None
copycat.workspace.wobject:308:         description.descriptor_number = len(self.descriptions)
copycat.workspace.wobject:309:         self.descriptions.append(description)
copycat.workspace:93:                 rightmost_letter.add_description(Description(rightmost_letter,
copycat.workspace:94:                                                              slipnet.plato_string_position_category,
copycat.workspace:95:                                                              slipnet.plato_rightmost))
copycat.workspace.description:21:         super(Description, self).__init__()
copycat.workspace.structure:21:         self.string = None
copycat.workspace.structure:22:         self.structure_category = None
copycat.workspace.structure:23:         self.in_group = False
copycat.workspace.structure:24:         self.internal_strength = 0
copycat.workspace.structure:25:         self.external_strength = 0
copycat.workspace.structure:26:         self.total_strength = 0
copycat.workspace.structure:27:         self.proposal_level = None
copycat.workspace.description:22:         self.object = object1
copycat.workspace.description:23:         self.string = object1.string
copycat.workspace.description:24:         self.description_type = description_type
copycat.workspace.description:25:         self.descriptor = descriptor
copycat.workspace.description:26:         self.description_number = None
copycat.workspace.wobject:308:         description.descriptor_number = len(self.descriptions)
copycat.workspace.wobject:309:         self.descriptions.append(description)
copycat.workspace:101:             if string.length == 3:
copycat.workspace:102:                 middle_letter = string.letters[1]
copycat.workspace:103:                 middle_letter.add_description(Description(middle_letter,
copycat.workspace:104:                                                           slipnet.plato_string_position_category,
copycat.workspace:105:                                                           slipnet.plato_middle))
copycat.workspace.description:21:         super(Description, self).__init__()
copycat.workspace.structure:21:         self.string = None
copycat.workspace.structure:22:         self.structure_category = None
copycat.workspace.structure:23:         self.in_group = False
copycat.workspace.structure:24:         self.internal_strength = 0
copycat.workspace.structure:25:         self.external_strength = 0
copycat.workspace.structure:26:         self.total_strength = 0
copycat.workspace.structure:27:         self.proposal_level = None
copycat.workspace.description:22:         self.object = object1
copycat.workspace.description:23:         self.string = object1.string
copycat.workspace.description:24:         self.description_type = description_type
copycat.workspace.description:25:         self.descriptor = descriptor
copycat.workspace.description:26:         self.description_number = None
copycat.workspace.wobject:308:         description.descriptor_number = len(self.descriptions)
copycat.workspace.wobject:309:         self.descriptions.append(description)
copycat.workspace:76:         for string in [self.initial_string, self.modified_string, self.target_string]:
copycat.workspace:77:             for letter in string.letters:
copycat.workspace:78:                 description = Description(letter,
copycat.workspace:79:                                           slipnet.plato_object_category,
copycat.workspace:80:                                           slipnet.plato_letter)
copycat.workspace.description:21:         super(Description, self).__init__()
copycat.workspace.structure:21:         self.string = None
copycat.workspace.structure:22:         self.structure_category = None
copycat.workspace.structure:23:         self.in_group = False
copycat.workspace.structure:24:         self.internal_strength = 0
copycat.workspace.structure:25:         self.external_strength = 0
copycat.workspace.structure:26:         self.total_strength = 0
copycat.workspace.structure:27:         self.proposal_level = None
copycat.workspace.description:22:         self.object = object1
copycat.workspace.description:23:         self.string = object1.string
copycat.workspace.description:24:         self.description_type = description_type
copycat.workspace.description:25:         self.descriptor = descriptor
copycat.workspace.description:26:         self.description_number = None
copycat.workspace:81:                 letter.add_description(description)
copycat.workspace.wobject:308:         description.descriptor_number = len(self.descriptions)
copycat.workspace.wobject:309:         self.descriptions.append(description)
copycat.workspace:82:                 description = Description(letter,
copycat.workspace:83:                                           slipnet.plato_letter_category,
copycat.workspace:84:                                           slipnet.get_plato_letter(letter.name))
copycat.slipnet:288:     index = string.ascii_lowercase.find(str(character))
copycat.slipnet:289:     return slipnet_letters[index]
copycat.workspace.description:21:         super(Description, self).__init__()
copycat.workspace.structure:21:         self.string = None
copycat.workspace.structure:22:         self.structure_category = None
copycat.workspace.structure:23:         self.in_group = False
copycat.workspace.structure:24:         self.internal_strength = 0
copycat.workspace.structure:25:         self.external_strength = 0
copycat.workspace.structure:26:         self.total_strength = 0
copycat.workspace.structure:27:         self.proposal_level = None
copycat.workspace.description:22:         self.object = object1
copycat.workspace.description:23:         self.string = object1.string
copycat.workspace.description:24:         self.description_type = description_type
copycat.workspace.description:25:         self.descriptor = descriptor
copycat.workspace.description:26:         self.description_number = None
copycat.workspace:85:                 letter.add_description(description)
copycat.workspace.wobject:308:         description.descriptor_number = len(self.descriptions)
copycat.workspace.wobject:309:         self.descriptions.append(description)
copycat.workspace:77:             for letter in string.letters:
copycat.workspace:78:                 description = Description(letter,
copycat.workspace:79:                                           slipnet.plato_object_category,
copycat.workspace:80:                                           slipnet.plato_letter)
copycat.workspace.description:21:         super(Description, self).__init__()
copycat.workspace.structure:21:         self.string = None
copycat.workspace.structure:22:         self.structure_category = None
copycat.workspace.structure:23:         self.in_group = False
copycat.workspace.structure:24:         self.internal_strength = 0
copycat.workspace.structure:25:         self.external_strength = 0
copycat.workspace.structure:26:         self.total_strength = 0
copycat.workspace.structure:27:         self.proposal_level = None
copycat.workspace.description:22:         self.object = object1
copycat.workspace.description:23:         self.string = object1.string
copycat.workspace.description:24:         self.description_type = description_type
copycat.workspace.description:25:         self.descriptor = descriptor
copycat.workspace.description:26:         self.description_number = None
copycat.workspace:81:                 letter.add_description(description)
copycat.workspace.wobject:308:         description.descriptor_number = len(self.descriptions)
copycat.workspace.wobject:309:         self.descriptions.append(description)
copycat.workspace:82:                 description = Description(letter,
copycat.workspace:83:                                           slipnet.plato_letter_category,
copycat.workspace:84:                                           slipnet.get_plato_letter(letter.name))
copycat.slipnet:288:     index = string.ascii_lowercase.find(str(character))
copycat.slipnet:289:     return slipnet_letters[index]
copycat.workspace.description:21:         super(Description, self).__init__()
copycat.workspace.structure:21:         self.string = None
copycat.workspace.structure:22:         self.structure_category = None
copycat.workspace.structure:23:         self.in_group = False
copycat.workspace.structure:24:         self.internal_strength = 0
copycat.workspace.structure:25:         self.external_strength = 0
copycat.workspace.structure:26:         self.total_strength = 0
copycat.workspace.structure:27:         self.proposal_level = None
copycat.workspace.description:22:         self.object = object1
copycat.workspace.description:23:         self.string = object1.string
copycat.workspace.description:24:         self.description_type = description_type
copycat.workspace.description:25:         self.descriptor = descriptor
copycat.workspace.description:26:         self.description_number = None
copycat.workspace:85:                 letter.add_description(description)
copycat.workspace.wobject:308:         description.descriptor_number = len(self.descriptions)
copycat.workspace.wobject:309:         self.descriptions.append(description)
copycat.workspace:77:             for letter in string.letters:
copycat.workspace:78:                 description = Description(letter,
copycat.workspace:79:                                           slipnet.plato_object_category,
copycat.workspace:80:                                           slipnet.plato_letter)
copycat.workspace.description:21:         super(Description, self).__init__()
copycat.workspace.structure:21:         self.string = None
copycat.workspace.structure:22:         self.structure_category = None
copycat.workspace.structure:23:         self.in_group = False
copycat.workspace.structure:24:         self.internal_strength = 0
copycat.workspace.structure:25:         self.external_strength = 0
copycat.workspace.structure:26:         self.total_strength = 0
copycat.workspace.structure:27:         self.proposal_level = None
copycat.workspace.description:22:         self.object = object1
copycat.workspace.description:23:         self.string = object1.string
copycat.workspace.description:24:         self.description_type = description_type
copycat.workspace.description:25:         self.descriptor = descriptor
copycat.workspace.description:26:         self.description_number = None
copycat.workspace:81:                 letter.add_description(description)
copycat.workspace.wobject:308:         description.descriptor_number = len(self.descriptions)
copycat.workspace.wobject:309:         self.descriptions.append(description)
copycat.workspace:82:                 description = Description(letter,
copycat.workspace:83:                                           slipnet.plato_letter_category,
copycat.workspace:84:                                           slipnet.get_plato_letter(letter.name))
copycat.slipnet:288:     index = string.ascii_lowercase.find(str(character))
copycat.slipnet:289:     return slipnet_letters[index]
copycat.workspace.description:21:         super(Description, self).__init__()
copycat.workspace.structure:21:         self.string = None
copycat.workspace.structure:22:         self.structure_category = None
copycat.workspace.structure:23:         self.in_group = False
copycat.workspace.structure:24:         self.internal_strength = 0
copycat.workspace.structure:25:         self.external_strength = 0
copycat.workspace.structure:26:         self.total_strength = 0
copycat.workspace.structure:27:         self.proposal_level = None
copycat.workspace.description:22:         self.object = object1
copycat.workspace.description:23:         self.string = object1.string
copycat.workspace.description:24:         self.description_type = description_type
copycat.workspace.description:25:         self.descriptor = descriptor
copycat.workspace.description:26:         self.description_number = None
copycat.workspace:85:                 letter.add_description(description)
copycat.workspace.wobject:308:         description.descriptor_number = len(self.descriptions)
copycat.workspace.wobject:309:         self.descriptions.append(description)
copycat.workspace:77:             for letter in string.letters:
copycat.workspace:87:             leftmost_letter = string.letters[0]
copycat.workspace:88:             if string.length > 1:
copycat.workspace:89:                 rightmost_letter = string.letters[-1]
copycat.workspace:90:                 leftmost_letter.add_description(Description(leftmost_letter,
copycat.workspace:91:                                                             slipnet.plato_string_position_category,
copycat.workspace:92:                                                             slipnet.plato_leftmost))
copycat.workspace.description:21:         super(Description, self).__init__()
copycat.workspace.structure:21:         self.string = None
copycat.workspace.structure:22:         self.structure_category = None
copycat.workspace.structure:23:         self.in_group = False
copycat.workspace.structure:24:         self.internal_strength = 0
copycat.workspace.structure:25:         self.external_strength = 0
copycat.workspace.structure:26:         self.total_strength = 0
copycat.workspace.structure:27:         self.proposal_level = None
copycat.workspace.description:22:         self.object = object1
copycat.workspace.description:23:         self.string = object1.string
copycat.workspace.description:24:         self.description_type = description_type
copycat.workspace.description:25:         self.descriptor = descriptor
copycat.workspace.description:26:         self.description_number = None
copycat.workspace.wobject:308:         description.descriptor_number = len(self.descriptions)
copycat.workspace.wobject:309:         self.descriptions.append(description)
copycat.workspace:93:                 rightmost_letter.add_description(Description(rightmost_letter,
copycat.workspace:94:                                                              slipnet.plato_string_position_category,
copycat.workspace:95:                                                              slipnet.plato_rightmost))
copycat.workspace.description:21:         super(Description, self).__init__()
copycat.workspace.structure:21:         self.string = None
copycat.workspace.structure:22:         self.structure_category = None
copycat.workspace.structure:23:         self.in_group = False
copycat.workspace.structure:24:         self.internal_strength = 0
copycat.workspace.structure:25:         self.external_strength = 0
copycat.workspace.structure:26:         self.total_strength = 0
copycat.workspace.structure:27:         self.proposal_level = None
copycat.workspace.description:22:         self.object = object1
copycat.workspace.description:23:         self.string = object1.string
copycat.workspace.description:24:         self.description_type = description_type
copycat.workspace.description:25:         self.descriptor = descriptor
copycat.workspace.description:26:         self.description_number = None
copycat.workspace.wobject:308:         description.descriptor_number = len(self.descriptions)
copycat.workspace.wobject:309:         self.descriptions.append(description)
copycat.workspace:101:             if string.length == 3:
copycat.workspace:102:                 middle_letter = string.letters[1]
copycat.workspace:103:                 middle_letter.add_description(Description(middle_letter,
copycat.workspace:104:                                                           slipnet.plato_string_position_category,
copycat.workspace:105:                                                           slipnet.plato_middle))
copycat.workspace.description:21:         super(Description, self).__init__()
copycat.workspace.structure:21:         self.string = None
copycat.workspace.structure:22:         self.structure_category = None
copycat.workspace.structure:23:         self.in_group = False
copycat.workspace.structure:24:         self.internal_strength = 0
copycat.workspace.structure:25:         self.external_strength = 0
copycat.workspace.structure:26:         self.total_strength = 0
copycat.workspace.structure:27:         self.proposal_level = None
copycat.workspace.description:22:         self.object = object1
copycat.workspace.description:23:         self.string = object1.string
copycat.workspace.description:24:         self.description_type = description_type
copycat.workspace.description:25:         self.descriptor = descriptor
copycat.workspace.description:26:         self.description_number = None
copycat.workspace.wobject:308:         description.descriptor_number = len(self.descriptions)
copycat.workspace.wobject:309:         self.descriptions.append(description)
copycat.workspace:76:         for string in [self.initial_string, self.modified_string, self.target_string]:
copycat.workspace:77:             for letter in string.letters:
copycat.workspace:78:                 description = Description(letter,
copycat.workspace:79:                                           slipnet.plato_object_category,
copycat.workspace:80:                                           slipnet.plato_letter)
copycat.workspace.description:21:         super(Description, self).__init__()
copycat.workspace.structure:21:         self.string = None
copycat.workspace.structure:22:         self.structure_category = None
copycat.workspace.structure:23:         self.in_group = False
copycat.workspace.structure:24:         self.internal_strength = 0
copycat.workspace.structure:25:         self.external_strength = 0
copycat.workspace.structure:26:         self.total_strength = 0
copycat.workspace.structure:27:         self.proposal_level = None
copycat.workspace.description:22:         self.object = object1
copycat.workspace.description:23:         self.string = object1.string
copycat.workspace.description:24:         self.description_type = description_type
copycat.workspace.description:25:         self.descriptor = descriptor
copycat.workspace.description:26:         self.description_number = None
copycat.workspace:81:                 letter.add_description(description)
copycat.workspace.wobject:308:         description.descriptor_number = len(self.descriptions)
copycat.workspace.wobject:309:         self.descriptions.append(description)
copycat.workspace:82:                 description = Description(letter,
copycat.workspace:83:                                           slipnet.plato_letter_category,
copycat.workspace:84:                                           slipnet.get_plato_letter(letter.name))
copycat.slipnet:288:     index = string.ascii_lowercase.find(str(character))
copycat.slipnet:289:     return slipnet_letters[index]
copycat.workspace.description:21:         super(Description, self).__init__()
copycat.workspace.structure:21:         self.string = None
copycat.workspace.structure:22:         self.structure_category = None
copycat.workspace.structure:23:         self.in_group = False
copycat.workspace.structure:24:         self.internal_strength = 0
copycat.workspace.structure:25:         self.external_strength = 0
copycat.workspace.structure:26:         self.total_strength = 0
copycat.workspace.structure:27:         self.proposal_level = None
copycat.workspace.description:22:         self.object = object1
copycat.workspace.description:23:         self.string = object1.string
copycat.workspace.description:24:         self.description_type = description_type
copycat.workspace.description:25:         self.descriptor = descriptor
copycat.workspace.description:26:         self.description_number = None
copycat.workspace:85:                 letter.add_description(description)
copycat.workspace.wobject:308:         description.descriptor_number = len(self.descriptions)
copycat.workspace.wobject:309:         self.descriptions.append(description)
copycat.workspace:77:             for letter in string.letters:
copycat.workspace:78:                 description = Description(letter,
copycat.workspace:79:                                           slipnet.plato_object_category,
copycat.workspace:80:                                           slipnet.plato_letter)
copycat.workspace.description:21:         super(Description, self).__init__()
copycat.workspace.structure:21:         self.string = None
copycat.workspace.structure:22:         self.structure_category = None
copycat.workspace.structure:23:         self.in_group = False
copycat.workspace.structure:24:         self.internal_strength = 0
copycat.workspace.structure:25:         self.external_strength = 0
copycat.workspace.structure:26:         self.total_strength = 0
copycat.workspace.structure:27:         self.proposal_level = None
copycat.workspace.description:22:         self.object = object1
copycat.workspace.description:23:         self.string = object1.string
copycat.workspace.description:24:         self.description_type = description_type
copycat.workspace.description:25:         self.descriptor = descriptor
copycat.workspace.description:26:         self.description_number = None
copycat.workspace:81:                 letter.add_description(description)
copycat.workspace.wobject:308:         description.descriptor_number = len(self.descriptions)
copycat.workspace.wobject:309:         self.descriptions.append(description)
copycat.workspace:82:                 description = Description(letter,
copycat.workspace:83:                                           slipnet.plato_letter_category,
copycat.workspace:84:                                           slipnet.get_plato_letter(letter.name))
copycat.slipnet:288:     index = string.ascii_lowercase.find(str(character))
copycat.slipnet:289:     return slipnet_letters[index]
copycat.workspace.description:21:         super(Description, self).__init__()
copycat.workspace.structure:21:         self.string = None
copycat.workspace.structure:22:         self.structure_category = None
copycat.workspace.structure:23:         self.in_group = False
copycat.workspace.structure:24:         self.internal_strength = 0
copycat.workspace.structure:25:         self.external_strength = 0
copycat.workspace.structure:26:         self.total_strength = 0
copycat.workspace.structure:27:         self.proposal_level = None
copycat.workspace.description:22:         self.object = object1
copycat.workspace.description:23:         self.string = object1.string
copycat.workspace.description:24:         self.description_type = description_type
copycat.workspace.description:25:         self.descriptor = descriptor
copycat.workspace.description:26:         self.description_number = None
copycat.workspace:85:                 letter.add_description(description)
copycat.workspace.wobject:308:         description.descriptor_number = len(self.descriptions)
copycat.workspace.wobject:309:         self.descriptions.append(description)
copycat.workspace:77:             for letter in string.letters:
copycat.workspace:78:                 description = Description(letter,
copycat.workspace:79:                                           slipnet.plato_object_category,
copycat.workspace:80:                                           slipnet.plato_letter)
copycat.workspace.description:21:         super(Description, self).__init__()
copycat.workspace.structure:21:         self.string = None
copycat.workspace.structure:22:         self.structure_category = None
copycat.workspace.structure:23:         self.in_group = False
copycat.workspace.structure:24:         self.internal_strength = 0
copycat.workspace.structure:25:         self.external_strength = 0
copycat.workspace.structure:26:         self.total_strength = 0
copycat.workspace.structure:27:         self.proposal_level = None
copycat.workspace.description:22:         self.object = object1
copycat.workspace.description:23:         self.string = object1.string
copycat.workspace.description:24:         self.description_type = description_type
copycat.workspace.description:25:         self.descriptor = descriptor
copycat.workspace.description:26:         self.description_number = None
copycat.workspace:81:                 letter.add_description(description)
copycat.workspace.wobject:308:         description.descriptor_number = len(self.descriptions)
copycat.workspace.wobject:309:         self.descriptions.append(description)
copycat.workspace:82:                 description = Description(letter,
copycat.workspace:83:                                           slipnet.plato_letter_category,
copycat.workspace:84:                                           slipnet.get_plato_letter(letter.name))
copycat.slipnet:288:     index = string.ascii_lowercase.find(str(character))
copycat.slipnet:289:     return slipnet_letters[index]
copycat.workspace.description:21:         super(Description, self).__init__()
copycat.workspace.structure:21:         self.string = None
copycat.workspace.structure:22:         self.structure_category = None
copycat.workspace.structure:23:         self.in_group = False
copycat.workspace.structure:24:         self.internal_strength = 0
copycat.workspace.structure:25:         self.external_strength = 0
copycat.workspace.structure:26:         self.total_strength = 0
copycat.workspace.structure:27:         self.proposal_level = None
copycat.workspace.description:22:         self.object = object1
copycat.workspace.description:23:         self.string = object1.string
copycat.workspace.description:24:         self.description_type = description_type
copycat.workspace.description:25:         self.descriptor = descriptor
copycat.workspace.description:26:         self.description_number = None
copycat.workspace:85:                 letter.add_description(description)
copycat.workspace.wobject:308:         description.descriptor_number = len(self.descriptions)
copycat.workspace.wobject:309:         self.descriptions.append(description)
copycat.workspace:77:             for letter in string.letters:
copycat.workspace:87:             leftmost_letter = string.letters[0]
copycat.workspace:88:             if string.length > 1:
copycat.workspace:89:                 rightmost_letter = string.letters[-1]
copycat.workspace:90:                 leftmost_letter.add_description(Description(leftmost_letter,
copycat.workspace:91:                                                             slipnet.plato_string_position_category,
copycat.workspace:92:                                                             slipnet.plato_leftmost))
copycat.workspace.description:21:         super(Description, self).__init__()
copycat.workspace.structure:21:         self.string = None
copycat.workspace.structure:22:         self.structure_category = None
copycat.workspace.structure:23:         self.in_group = False
copycat.workspace.structure:24:         self.internal_strength = 0
copycat.workspace.structure:25:         self.external_strength = 0
copycat.workspace.structure:26:         self.total_strength = 0
copycat.workspace.structure:27:         self.proposal_level = None
copycat.workspace.description:22:         self.object = object1
copycat.workspace.description:23:         self.string = object1.string
copycat.workspace.description:24:         self.description_type = description_type
copycat.workspace.description:25:         self.descriptor = descriptor
copycat.workspace.description:26:         self.description_number = None
copycat.workspace.wobject:308:         description.descriptor_number = len(self.descriptions)
copycat.workspace.wobject:309:         self.descriptions.append(description)
copycat.workspace:93:                 rightmost_letter.add_description(Description(rightmost_letter,
copycat.workspace:94:                                                              slipnet.plato_string_position_category,
copycat.workspace:95:                                                              slipnet.plato_rightmost))
copycat.workspace.description:21:         super(Description, self).__init__()
copycat.workspace.structure:21:         self.string = None
copycat.workspace.structure:22:         self.structure_category = None
copycat.workspace.structure:23:         self.in_group = False
copycat.workspace.structure:24:         self.internal_strength = 0
copycat.workspace.structure:25:         self.external_strength = 0
copycat.workspace.structure:26:         self.total_strength = 0
copycat.workspace.structure:27:         self.proposal_level = None
copycat.workspace.description:22:         self.object = object1
copycat.workspace.description:23:         self.string = object1.string
copycat.workspace.description:24:         self.description_type = description_type
copycat.workspace.description:25:         self.descriptor = descriptor
copycat.workspace.description:26:         self.description_number = None
copycat.workspace.wobject:308:         description.descriptor_number = len(self.descriptions)
copycat.workspace.wobject:309:         self.descriptions.append(description)
copycat.workspace:101:             if string.length == 3:
copycat.workspace:102:                 middle_letter = string.letters[1]
copycat.workspace:103:                 middle_letter.add_description(Description(middle_letter,
copycat.workspace:104:                                                           slipnet.plato_string_position_category,
copycat.workspace:105:                                                           slipnet.plato_middle))
copycat.workspace.description:21:         super(Description, self).__init__()
copycat.workspace.structure:21:         self.string = None
copycat.workspace.structure:22:         self.structure_category = None
copycat.workspace.structure:23:         self.in_group = False
copycat.workspace.structure:24:         self.internal_strength = 0
copycat.workspace.structure:25:         self.external_strength = 0
copycat.workspace.structure:26:         self.total_strength = 0
copycat.workspace.structure:27:         self.proposal_level = None
copycat.workspace.description:22:         self.object = object1
copycat.workspace.description:23:         self.string = object1.string
copycat.workspace.description:24:         self.description_type = description_type
copycat.workspace.description:25:         self.descriptor = descriptor
copycat.workspace.description:26:         self.description_number = None
copycat.workspace.wobject:308:         description.descriptor_number = len(self.descriptions)
copycat.workspace.wobject:309:         self.descriptions.append(description)
copycat.workspace:76:         for string in [self.initial_string, self.modified_string, self.target_string]:
copycat.workspace:107:         for obj in self.objects():
copycat.workspace:1020:         return self.initial_string.objects() + self.target_string.objects()
copycat.workspace.string:57:         return self.letters + self.groups
copycat.workspace.string:57:         return self.letters + self.groups
copycat.workspace:108:             if not obj:
copycat.workspace:110:             for description in obj.descriptions:
copycat.workspace:111:                 description.descriptor.activation_buffer += self.activation
copycat.workspace:110:             for description in obj.descriptions:
copycat.workspace:111:                 description.descriptor.activation_buffer += self.activation
copycat.workspace:110:             for description in obj.descriptions:
copycat.workspace:111:                 description.descriptor.activation_buffer += self.activation
copycat.workspace:110:             for description in obj.descriptions:
copycat.workspace:107:         for obj in self.objects():
copycat.workspace:108:             if not obj:
copycat.workspace:110:             for description in obj.descriptions:
copycat.workspace:111:                 description.descriptor.activation_buffer += self.activation
copycat.workspace:110:             for description in obj.descriptions:
copycat.workspace:111:                 description.descriptor.activation_buffer += self.activation
copycat.workspace:110:             for description in obj.descriptions:
copycat.workspace:111:                 description.descriptor.activation_buffer += self.activation
copycat.workspace:110:             for description in obj.descriptions:
copycat.workspace:107:         for obj in self.objects():
copycat.workspace:108:             if not obj:
copycat.workspace:110:             for description in obj.descriptions:
copycat.workspace:111:                 description.descriptor.activation_buffer += self.activation
copycat.workspace:110:             for description in obj.descriptions:
copycat.workspace:111:                 description.descriptor.activation_buffer += self.activation
copycat.workspace:110:             for description in obj.descriptions:
copycat.workspace:111:                 description.descriptor.activation_buffer += self.activation
copycat.workspace:110:             for description in obj.descriptions:
copycat.workspace:107:         for obj in self.objects():
copycat.workspace:108:             if not obj:
copycat.workspace:109:                 continue
copycat.workspace:107:         for obj in self.objects():
copycat.workspace:108:             if not obj:
copycat.workspace:109:                 continue
copycat.workspace:107:         for obj in self.objects():
copycat.workspace:108:             if not obj:
copycat.workspace:109:                 continue
copycat.workspace:107:         for obj in self.objects():
copycat.workspace:108:             if not obj:
copycat.workspace:110:             for description in obj.descriptions:
copycat.workspace:111:                 description.descriptor.activation_buffer += self.activation
copycat.workspace:110:             for description in obj.descriptions:
copycat.workspace:111:                 description.descriptor.activation_buffer += self.activation
copycat.workspace:110:             for description in obj.descriptions:
copycat.workspace:111:                 description.descriptor.activation_buffer += self.activation
copycat.workspace:110:             for description in obj.descriptions:
copycat.workspace:107:         for obj in self.objects():
copycat.workspace:108:             if not obj:
copycat.workspace:110:             for description in obj.descriptions:
copycat.workspace:111:                 description.descriptor.activation_buffer += self.activation
copycat.workspace:110:             for description in obj.descriptions:
copycat.workspace:111:                 description.descriptor.activation_buffer += self.activation
copycat.workspace:110:             for description in obj.descriptions:
copycat.workspace:111:                 description.descriptor.activation_buffer += self.activation
copycat.workspace:110:             for description in obj.descriptions:
copycat.workspace:107:         for obj in self.objects():
copycat.workspace:108:             if not obj:
copycat.workspace:110:             for description in obj.descriptions:
copycat.workspace:111:                 description.descriptor.activation_buffer += self.activation
copycat.workspace:110:             for description in obj.descriptions:
copycat.workspace:111:                 description.descriptor.activation_buffer += self.activation
copycat.workspace:110:             for description in obj.descriptions:
copycat.workspace:111:                 description.descriptor.activation_buffer += self.activation
copycat.workspace:110:             for description in obj.descriptions:
copycat.workspace:107:         for obj in self.objects():
copycat.workspace:108:             if not obj:
copycat.workspace:109:                 continue
copycat.workspace:107:         for obj in self.objects():
copycat.workspace:108:             if not obj:
copycat.workspace:109:                 continue
copycat.workspace:107:         for obj in self.objects():
copycat.workspace:108:             if not obj:
copycat.workspace:109:                 continue
copycat.workspace:107:         for obj in self.objects():


#### UPDATE EVERYTHING


copycat.run:34:         if self.coderack.time % self.timestep == 0:
copycat.run:35:             self.update()
copycat.run:61:         self.workspace.update()
copycat.workspace:119:         for structure in self.structures():
copycat.workspace:1030:         structures = self.bonds() + self.groups() + self.correspondences()
copycat.workspace:1037:         return self.initial_string.bonds() + self.target_string.bonds()
copycat.workspace.string:97:         bs = [b for b in toolbox.flatten(self.from_to_bonds) if b]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.workspace.string:97:         bs = [b for b in toolbox.flatten(self.from_to_bonds) if b]
copycat.workspace.string:97:         bs = [b for b in toolbox.flatten(self.from_to_bonds) if b]
copycat.workspace.string:97:         bs = [b for b in toolbox.flatten(self.from_to_bonds) if b]
copycat.workspace.string:97:         bs = [b for b in toolbox.flatten(self.from_to_bonds) if b]
copycat.workspace.string:97:         bs = [b for b in toolbox.flatten(self.from_to_bonds) if b]
copycat.workspace.string:97:         bs = [b for b in toolbox.flatten(self.from_to_bonds) if b]
copycat.workspace.string:97:         bs = [b for b in toolbox.flatten(self.from_to_bonds) if b]
copycat.workspace.string:97:         bs = [b for b in toolbox.flatten(self.from_to_bonds) if b]
copycat.workspace.string:97:         bs = [b for b in toolbox.flatten(self.from_to_bonds) if b]
copycat.workspace.string:98:         return list(set(bs))
copycat.workspace.string:97:         bs = [b for b in toolbox.flatten(self.from_to_bonds) if b]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.workspace.string:97:         bs = [b for b in toolbox.flatten(self.from_to_bonds) if b]
copycat.workspace.string:97:         bs = [b for b in toolbox.flatten(self.from_to_bonds) if b]
copycat.workspace.string:97:         bs = [b for b in toolbox.flatten(self.from_to_bonds) if b]
copycat.workspace.string:97:         bs = [b for b in toolbox.flatten(self.from_to_bonds) if b]
copycat.workspace.string:97:         bs = [b for b in toolbox.flatten(self.from_to_bonds) if b]
copycat.workspace.string:97:         bs = [b for b in toolbox.flatten(self.from_to_bonds) if b]
copycat.workspace.string:97:         bs = [b for b in toolbox.flatten(self.from_to_bonds) if b]
copycat.workspace.string:97:         bs = [b for b in toolbox.flatten(self.from_to_bonds) if b]
copycat.workspace.string:97:         bs = [b for b in toolbox.flatten(self.from_to_bonds) if b]
copycat.workspace.string:98:         return list(set(bs))
copycat.workspace:1040:         return self.initial_string.groups + self.target_string.groups
copycat.workspace:1043:         return toolbox.flatten(self._correspondences)
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.workspace:1031:         if self.rule:
copycat.workspace:1034:             return structures
copycat.workspace:120:             if structure:
copycat.workspace:119:         for structure in self.structures():
copycat.workspace:120:             if structure:
copycat.workspace:119:         for structure in self.structures():
copycat.workspace:120:             if structure:
copycat.workspace:119:         for structure in self.structures():
copycat.workspace:120:             if structure:
copycat.workspace:119:         for structure in self.structures():
copycat.workspace:120:             if structure:
copycat.workspace:119:         for structure in self.structures():
copycat.workspace:120:             if structure:
copycat.workspace:119:         for structure in self.structures():
copycat.workspace:122:         for object_ in self.objects():
copycat.workspace:1020:         return self.initial_string.objects() + self.target_string.objects()
copycat.workspace.string:57:         return self.letters + self.groups
copycat.workspace.string:57:         return self.letters + self.groups
copycat.workspace:123:             if object_:
copycat.workspace:124:                 object_.update_object_values()
copycat.workspace.wobject:143:         self.raw_importance = self.calculate_raw_importance()
copycat.workspace.wobject:61:         result = sum([rd.descriptor.activation for rd in self.relevant_descriptions()])
copycat.workspace.wobject:328:         return [d for d in self.descriptions if d.description_type.is_active()]
copycat.slipnet.slipnode:143:         return self.activation == 100
copycat.workspace.wobject:328:         return [d for d in self.descriptions if d.description_type.is_active()]
copycat.slipnet.slipnode:143:         return self.activation == 100
copycat.workspace.wobject:328:         return [d for d in self.descriptions if d.description_type.is_active()]
copycat.slipnet.slipnode:143:         return self.activation == 100
copycat.workspace.wobject:328:         return [d for d in self.descriptions if d.description_type.is_active()]
copycat.workspace.wobject:62:         if self.is_changed:
copycat.workspace.wobject:64:         if self.group:
copycat.workspace.wobject:66:         return result
copycat.workspace.wobject:144:         self.intra_sring_happiness = self.calculate_intra_string_happiness()
copycat.workspace.wobject:73:         if self.spans_whole_string():
copycat.workspace.wobject:189:         return self.letter_span() == self.string.length
copycat.workspace.wobject:158:         if self.groups == None:
copycat.workspace.wobject:159:             return 1
copycat.workspace.wobject:76:             if self.group:
copycat.workspace.wobject:79:                 if not self.bonds:
copycat.workspace.wobject:80:                     result = 0
copycat.workspace.wobject:87:         return result
copycat.workspace.wobject:145:         self.intra_string_unhappiness = self.calculate_intra_string_unhappiness()
copycat.workspace.wobject:90:         return 100 - self.intra_string_happiness
copycat.workspace.wobject:146:         self.inter_string_happiness = self.calculate_inter_string_happiness()
copycat.workspace.wobject:98:         if self.correspondence:
copycat.workspace.wobject:101:             return 0
copycat.workspace.wobject:147:         self.inter_string_unhappiness = self.calculate_inter_string_unhappiness()
copycat.workspace.wobject:104:         return 100 - self.inter_string_happiness
copycat.workspace.wobject:148:         self.total_happiness = self.calculate_total_happiness()
copycat.workspace.wobject:107:         return round(toolbox.average(self.intra_string_happiness,
copycat.workspace.wobject:108:                                       self.inter_string_happiness))
copycat.toolbox:96:     return sum(args) / float(len(args))
copycat.workspace.wobject:149:         self.total_unhappiness = self.calculate_total_unhappiness()
copycat.workspace.wobject:111:         return 100 - self.total_happiness
copycat.workspace.wobject:150:         self.intra_string_salience = self.calculate_intra_string_salience()
copycat.workspace.wobject:118:         if self.clamp_salience:
copycat.workspace.wobject:121:             return round(toolbox.weighted_average([2, 8],
copycat.workspace.wobject:122:                                                   [self.relative_importance,
copycat.workspace.wobject:123:                                                    self.intra_string_unhappiness]))
copycat.toolbox:24:     weight_sum = sum(weights)
copycat.toolbox:25:     value_sum = sum(map(lambda a, b: a * b, weights, values))
copycat.toolbox:25:     value_sum = sum(map(lambda a, b: a * b, weights, values))
copycat.toolbox:25:     value_sum = sum(map(lambda a, b: a * b, weights, values))
copycat.toolbox:26:     return int(value_sum / float(weight_sum))
copycat.workspace.wobject:151:         self.inter_string_salience = self.calculate_inter_string_salience()
copycat.workspace.wobject:130:         if self.clamp_salience:
copycat.workspace.wobject:133:             a = round(toolbox.weighted_average([8, 2],
copycat.workspace.wobject:134:                                                [self.relative_importance,
copycat.workspace.wobject:135:                                                self.inter_string_unhappiness]))
copycat.toolbox:24:     weight_sum = sum(weights)
copycat.toolbox:25:     value_sum = sum(map(lambda a, b: a * b, weights, values))
copycat.toolbox:25:     value_sum = sum(map(lambda a, b: a * b, weights, values))
copycat.toolbox:25:     value_sum = sum(map(lambda a, b: a * b, weights, values))
copycat.toolbox:26:     return int(value_sum / float(weight_sum))
copycat.workspace.wobject:136:             return a
copycat.workspace.wobject:152:         self.total_string_salience = self.calculate_total_salience()
copycat.workspace.wobject:139:         return round(toolbox.average(self.intra_string_salience,
copycat.workspace.wobject:140:                                      self.inter_string_salience))
copycat.toolbox:96:     return sum(args) / float(len(args))
copycat.workspace:122:         for object_ in self.objects():
copycat.workspace:123:             if object_:
copycat.workspace:124:                 object_.update_object_values()
copycat.workspace.wobject:143:         self.raw_importance = self.calculate_raw_importance()
copycat.workspace.wobject:61:         result = sum([rd.descriptor.activation for rd in self.relevant_descriptions()])
copycat.workspace.wobject:328:         return [d for d in self.descriptions if d.description_type.is_active()]
copycat.slipnet.slipnode:143:         return self.activation == 100
copycat.workspace.wobject:328:         return [d for d in self.descriptions if d.description_type.is_active()]
copycat.slipnet.slipnode:143:         return self.activation == 100
copycat.workspace.wobject:328:         return [d for d in self.descriptions if d.description_type.is_active()]
copycat.slipnet.slipnode:143:         return self.activation == 100
copycat.workspace.wobject:328:         return [d for d in self.descriptions if d.description_type.is_active()]
copycat.workspace.wobject:62:         if self.is_changed:
copycat.workspace.wobject:64:         if self.group:
copycat.workspace.wobject:66:         return result
copycat.workspace.wobject:144:         self.intra_sring_happiness = self.calculate_intra_string_happiness()
copycat.workspace.wobject:73:         if self.spans_whole_string():
copycat.workspace.wobject:189:         return self.letter_span() == self.string.length
copycat.workspace.wobject:158:         if self.groups == None:
copycat.workspace.wobject:159:             return 1
copycat.workspace.wobject:76:             if self.group:
copycat.workspace.wobject:79:                 if not self.bonds:
copycat.workspace.wobject:80:                     result = 0
copycat.workspace.wobject:87:         return result
copycat.workspace.wobject:145:         self.intra_string_unhappiness = self.calculate_intra_string_unhappiness()
copycat.workspace.wobject:90:         return 100 - self.intra_string_happiness
copycat.workspace.wobject:146:         self.inter_string_happiness = self.calculate_inter_string_happiness()
copycat.workspace.wobject:98:         if self.correspondence:
copycat.workspace.wobject:101:             return 0
copycat.workspace.wobject:147:         self.inter_string_unhappiness = self.calculate_inter_string_unhappiness()
copycat.workspace.wobject:104:         return 100 - self.inter_string_happiness
copycat.workspace.wobject:148:         self.total_happiness = self.calculate_total_happiness()
copycat.workspace.wobject:107:         return round(toolbox.average(self.intra_string_happiness,
copycat.workspace.wobject:108:                                       self.inter_string_happiness))
copycat.toolbox:96:     return sum(args) / float(len(args))
copycat.workspace.wobject:149:         self.total_unhappiness = self.calculate_total_unhappiness()
copycat.workspace.wobject:111:         return 100 - self.total_happiness
copycat.workspace.wobject:150:         self.intra_string_salience = self.calculate_intra_string_salience()
copycat.workspace.wobject:118:         if self.clamp_salience:
copycat.workspace.wobject:121:             return round(toolbox.weighted_average([2, 8],
copycat.workspace.wobject:122:                                                   [self.relative_importance,
copycat.workspace.wobject:123:                                                    self.intra_string_unhappiness]))
copycat.toolbox:24:     weight_sum = sum(weights)
copycat.toolbox:25:     value_sum = sum(map(lambda a, b: a * b, weights, values))
copycat.toolbox:25:     value_sum = sum(map(lambda a, b: a * b, weights, values))
copycat.toolbox:25:     value_sum = sum(map(lambda a, b: a * b, weights, values))
copycat.toolbox:26:     return int(value_sum / float(weight_sum))
copycat.workspace.wobject:151:         self.inter_string_salience = self.calculate_inter_string_salience()
copycat.workspace.wobject:130:         if self.clamp_salience:
copycat.workspace.wobject:133:             a = round(toolbox.weighted_average([8, 2],
copycat.workspace.wobject:134:                                                [self.relative_importance,
copycat.workspace.wobject:135:                                                self.inter_string_unhappiness]))
copycat.toolbox:24:     weight_sum = sum(weights)
copycat.toolbox:25:     value_sum = sum(map(lambda a, b: a * b, weights, values))
copycat.toolbox:25:     value_sum = sum(map(lambda a, b: a * b, weights, values))
copycat.toolbox:25:     value_sum = sum(map(lambda a, b: a * b, weights, values))
copycat.toolbox:26:     return int(value_sum / float(weight_sum))
copycat.workspace.wobject:136:             return a
copycat.workspace.wobject:152:         self.total_string_salience = self.calculate_total_salience()
copycat.workspace.wobject:139:         return round(toolbox.average(self.intra_string_salience,
copycat.workspace.wobject:140:                                      self.inter_string_salience))
copycat.toolbox:96:     return sum(args) / float(len(args))
copycat.workspace:122:         for object_ in self.objects():
copycat.workspace:123:             if object_:
copycat.workspace:124:                 object_.update_object_values()
copycat.workspace.wobject:143:         self.raw_importance = self.calculate_raw_importance()
copycat.workspace.wobject:61:         result = sum([rd.descriptor.activation for rd in self.relevant_descriptions()])
copycat.workspace.wobject:328:         return [d for d in self.descriptions if d.description_type.is_active()]
copycat.slipnet.slipnode:143:         return self.activation == 100
copycat.workspace.wobject:328:         return [d for d in self.descriptions if d.description_type.is_active()]
copycat.slipnet.slipnode:143:         return self.activation == 100
copycat.workspace.wobject:328:         return [d for d in self.descriptions if d.description_type.is_active()]
copycat.slipnet.slipnode:143:         return self.activation == 100
copycat.workspace.wobject:328:         return [d for d in self.descriptions if d.description_type.is_active()]
copycat.workspace.wobject:62:         if self.is_changed:
copycat.workspace.wobject:64:         if self.group:
copycat.workspace.wobject:66:         return result
copycat.workspace.wobject:144:         self.intra_sring_happiness = self.calculate_intra_string_happiness()
copycat.workspace.wobject:73:         if self.spans_whole_string():
copycat.workspace.wobject:189:         return self.letter_span() == self.string.length
copycat.workspace.wobject:158:         if self.groups == None:
copycat.workspace.wobject:159:             return 1
copycat.workspace.wobject:76:             if self.group:
copycat.workspace.wobject:79:                 if not self.bonds:
copycat.workspace.wobject:80:                     result = 0
copycat.workspace.wobject:87:         return result
copycat.workspace.wobject:145:         self.intra_string_unhappiness = self.calculate_intra_string_unhappiness()
copycat.workspace.wobject:90:         return 100 - self.intra_string_happiness
copycat.workspace.wobject:146:         self.inter_string_happiness = self.calculate_inter_string_happiness()
copycat.workspace.wobject:98:         if self.correspondence:
copycat.workspace.wobject:101:             return 0
copycat.workspace.wobject:147:         self.inter_string_unhappiness = self.calculate_inter_string_unhappiness()
copycat.workspace.wobject:104:         return 100 - self.inter_string_happiness
copycat.workspace.wobject:148:         self.total_happiness = self.calculate_total_happiness()
copycat.workspace.wobject:107:         return round(toolbox.average(self.intra_string_happiness,
copycat.workspace.wobject:108:                                       self.inter_string_happiness))
copycat.toolbox:96:     return sum(args) / float(len(args))
copycat.workspace.wobject:149:         self.total_unhappiness = self.calculate_total_unhappiness()
copycat.workspace.wobject:111:         return 100 - self.total_happiness
copycat.workspace.wobject:150:         self.intra_string_salience = self.calculate_intra_string_salience()
copycat.workspace.wobject:118:         if self.clamp_salience:
copycat.workspace.wobject:121:             return round(toolbox.weighted_average([2, 8],
copycat.workspace.wobject:122:                                                   [self.relative_importance,
copycat.workspace.wobject:123:                                                    self.intra_string_unhappiness]))
copycat.toolbox:24:     weight_sum = sum(weights)
copycat.toolbox:25:     value_sum = sum(map(lambda a, b: a * b, weights, values))
copycat.toolbox:25:     value_sum = sum(map(lambda a, b: a * b, weights, values))
copycat.toolbox:25:     value_sum = sum(map(lambda a, b: a * b, weights, values))
copycat.toolbox:26:     return int(value_sum / float(weight_sum))
copycat.workspace.wobject:151:         self.inter_string_salience = self.calculate_inter_string_salience()
copycat.workspace.wobject:130:         if self.clamp_salience:
copycat.workspace.wobject:133:             a = round(toolbox.weighted_average([8, 2],
copycat.workspace.wobject:134:                                                [self.relative_importance,
copycat.workspace.wobject:135:                                                self.inter_string_unhappiness]))
copycat.toolbox:24:     weight_sum = sum(weights)
copycat.toolbox:25:     value_sum = sum(map(lambda a, b: a * b, weights, values))
copycat.toolbox:25:     value_sum = sum(map(lambda a, b: a * b, weights, values))
copycat.toolbox:25:     value_sum = sum(map(lambda a, b: a * b, weights, values))
copycat.toolbox:26:     return int(value_sum / float(weight_sum))
copycat.workspace.wobject:136:             return a
copycat.workspace.wobject:152:         self.total_string_salience = self.calculate_total_salience()
copycat.workspace.wobject:139:         return round(toolbox.average(self.intra_string_salience,
copycat.workspace.wobject:140:                                      self.inter_string_salience))
copycat.toolbox:96:     return sum(args) / float(len(args))
copycat.workspace:122:         for object_ in self.objects():
copycat.workspace:123:             if object_:
copycat.workspace:122:         for object_ in self.objects():
copycat.workspace:123:             if object_:
copycat.workspace:122:         for object_ in self.objects():
copycat.workspace:123:             if object_:
copycat.workspace:122:         for object_ in self.objects():
copycat.workspace:123:             if object_:
copycat.workspace:124:                 object_.update_object_values()
copycat.workspace.wobject:143:         self.raw_importance = self.calculate_raw_importance()
copycat.workspace.wobject:61:         result = sum([rd.descriptor.activation for rd in self.relevant_descriptions()])
copycat.workspace.wobject:328:         return [d for d in self.descriptions if d.description_type.is_active()]
copycat.slipnet.slipnode:143:         return self.activation == 100
copycat.workspace.wobject:328:         return [d for d in self.descriptions if d.description_type.is_active()]
copycat.slipnet.slipnode:143:         return self.activation == 100
copycat.workspace.wobject:328:         return [d for d in self.descriptions if d.description_type.is_active()]
copycat.slipnet.slipnode:143:         return self.activation == 100
copycat.workspace.wobject:328:         return [d for d in self.descriptions if d.description_type.is_active()]
copycat.workspace.wobject:62:         if self.is_changed:
copycat.workspace.wobject:64:         if self.group:
copycat.workspace.wobject:66:         return result
copycat.workspace.wobject:144:         self.intra_sring_happiness = self.calculate_intra_string_happiness()
copycat.workspace.wobject:73:         if self.spans_whole_string():
copycat.workspace.wobject:189:         return self.letter_span() == self.string.length
copycat.workspace.wobject:158:         if self.groups == None:
copycat.workspace.wobject:159:             return 1
copycat.workspace.wobject:76:             if self.group:
copycat.workspace.wobject:79:                 if not self.bonds:
copycat.workspace.wobject:80:                     result = 0
copycat.workspace.wobject:87:         return result
copycat.workspace.wobject:145:         self.intra_string_unhappiness = self.calculate_intra_string_unhappiness()
copycat.workspace.wobject:90:         return 100 - self.intra_string_happiness
copycat.workspace.wobject:146:         self.inter_string_happiness = self.calculate_inter_string_happiness()
copycat.workspace.wobject:98:         if self.correspondence:
copycat.workspace.wobject:101:             return 0
copycat.workspace.wobject:147:         self.inter_string_unhappiness = self.calculate_inter_string_unhappiness()
copycat.workspace.wobject:104:         return 100 - self.inter_string_happiness
copycat.workspace.wobject:148:         self.total_happiness = self.calculate_total_happiness()
copycat.workspace.wobject:107:         return round(toolbox.average(self.intra_string_happiness,
copycat.workspace.wobject:108:                                       self.inter_string_happiness))
copycat.toolbox:96:     return sum(args) / float(len(args))
copycat.workspace.wobject:149:         self.total_unhappiness = self.calculate_total_unhappiness()
copycat.workspace.wobject:111:         return 100 - self.total_happiness
copycat.workspace.wobject:150:         self.intra_string_salience = self.calculate_intra_string_salience()
copycat.workspace.wobject:118:         if self.clamp_salience:
copycat.workspace.wobject:121:             return round(toolbox.weighted_average([2, 8],
copycat.workspace.wobject:122:                                                   [self.relative_importance,
copycat.workspace.wobject:123:                                                    self.intra_string_unhappiness]))
copycat.toolbox:24:     weight_sum = sum(weights)
copycat.toolbox:25:     value_sum = sum(map(lambda a, b: a * b, weights, values))
copycat.toolbox:25:     value_sum = sum(map(lambda a, b: a * b, weights, values))
copycat.toolbox:25:     value_sum = sum(map(lambda a, b: a * b, weights, values))
copycat.toolbox:26:     return int(value_sum / float(weight_sum))
copycat.workspace.wobject:151:         self.inter_string_salience = self.calculate_inter_string_salience()
copycat.workspace.wobject:130:         if self.clamp_salience:
copycat.workspace.wobject:133:             a = round(toolbox.weighted_average([8, 2],
copycat.workspace.wobject:134:                                                [self.relative_importance,
copycat.workspace.wobject:135:                                                self.inter_string_unhappiness]))
copycat.toolbox:24:     weight_sum = sum(weights)
copycat.toolbox:25:     value_sum = sum(map(lambda a, b: a * b, weights, values))
copycat.toolbox:25:     value_sum = sum(map(lambda a, b: a * b, weights, values))
copycat.toolbox:25:     value_sum = sum(map(lambda a, b: a * b, weights, values))
copycat.toolbox:26:     return int(value_sum / float(weight_sum))
copycat.workspace.wobject:136:             return a
copycat.workspace.wobject:152:         self.total_string_salience = self.calculate_total_salience()
copycat.workspace.wobject:139:         return round(toolbox.average(self.intra_string_salience,
copycat.workspace.wobject:140:                                      self.inter_string_salience))
copycat.toolbox:96:     return sum(args) / float(len(args))
copycat.workspace:122:         for object_ in self.objects():
copycat.workspace:123:             if object_:
copycat.workspace:124:                 object_.update_object_values()
copycat.workspace.wobject:143:         self.raw_importance = self.calculate_raw_importance()
copycat.workspace.wobject:61:         result = sum([rd.descriptor.activation for rd in self.relevant_descriptions()])
copycat.workspace.wobject:328:         return [d for d in self.descriptions if d.description_type.is_active()]
copycat.slipnet.slipnode:143:         return self.activation == 100
copycat.workspace.wobject:328:         return [d for d in self.descriptions if d.description_type.is_active()]
copycat.slipnet.slipnode:143:         return self.activation == 100
copycat.workspace.wobject:328:         return [d for d in self.descriptions if d.description_type.is_active()]
copycat.slipnet.slipnode:143:         return self.activation == 100
copycat.workspace.wobject:328:         return [d for d in self.descriptions if d.description_type.is_active()]
copycat.workspace.wobject:62:         if self.is_changed:
copycat.workspace.wobject:64:         if self.group:
copycat.workspace.wobject:66:         return result
copycat.workspace.wobject:144:         self.intra_sring_happiness = self.calculate_intra_string_happiness()
copycat.workspace.wobject:73:         if self.spans_whole_string():
copycat.workspace.wobject:189:         return self.letter_span() == self.string.length
copycat.workspace.wobject:158:         if self.groups == None:
copycat.workspace.wobject:159:             return 1
copycat.workspace.wobject:76:             if self.group:
copycat.workspace.wobject:79:                 if not self.bonds:
copycat.workspace.wobject:80:                     result = 0
copycat.workspace.wobject:87:         return result
copycat.workspace.wobject:145:         self.intra_string_unhappiness = self.calculate_intra_string_unhappiness()
copycat.workspace.wobject:90:         return 100 - self.intra_string_happiness
copycat.workspace.wobject:146:         self.inter_string_happiness = self.calculate_inter_string_happiness()
copycat.workspace.wobject:98:         if self.correspondence:
copycat.workspace.wobject:101:             return 0
copycat.workspace.wobject:147:         self.inter_string_unhappiness = self.calculate_inter_string_unhappiness()
copycat.workspace.wobject:104:         return 100 - self.inter_string_happiness
copycat.workspace.wobject:148:         self.total_happiness = self.calculate_total_happiness()
copycat.workspace.wobject:107:         return round(toolbox.average(self.intra_string_happiness,
copycat.workspace.wobject:108:                                       self.inter_string_happiness))
copycat.toolbox:96:     return sum(args) / float(len(args))
copycat.workspace.wobject:149:         self.total_unhappiness = self.calculate_total_unhappiness()
copycat.workspace.wobject:111:         return 100 - self.total_happiness
copycat.workspace.wobject:150:         self.intra_string_salience = self.calculate_intra_string_salience()
copycat.workspace.wobject:118:         if self.clamp_salience:
copycat.workspace.wobject:121:             return round(toolbox.weighted_average([2, 8],
copycat.workspace.wobject:122:                                                   [self.relative_importance,
copycat.workspace.wobject:123:                                                    self.intra_string_unhappiness]))
copycat.toolbox:24:     weight_sum = sum(weights)
copycat.toolbox:25:     value_sum = sum(map(lambda a, b: a * b, weights, values))
copycat.toolbox:25:     value_sum = sum(map(lambda a, b: a * b, weights, values))
copycat.toolbox:25:     value_sum = sum(map(lambda a, b: a * b, weights, values))
copycat.toolbox:26:     return int(value_sum / float(weight_sum))
copycat.workspace.wobject:151:         self.inter_string_salience = self.calculate_inter_string_salience()
copycat.workspace.wobject:130:         if self.clamp_salience:
copycat.workspace.wobject:133:             a = round(toolbox.weighted_average([8, 2],
copycat.workspace.wobject:134:                                                [self.relative_importance,
copycat.workspace.wobject:135:                                                self.inter_string_unhappiness]))
copycat.toolbox:24:     weight_sum = sum(weights)
copycat.toolbox:25:     value_sum = sum(map(lambda a, b: a * b, weights, values))
copycat.toolbox:25:     value_sum = sum(map(lambda a, b: a * b, weights, values))
copycat.toolbox:25:     value_sum = sum(map(lambda a, b: a * b, weights, values))
copycat.toolbox:26:     return int(value_sum / float(weight_sum))
copycat.workspace.wobject:136:             return a
copycat.workspace.wobject:152:         self.total_string_salience = self.calculate_total_salience()
copycat.workspace.wobject:139:         return round(toolbox.average(self.intra_string_salience,
copycat.workspace.wobject:140:                                      self.inter_string_salience))
copycat.toolbox:96:     return sum(args) / float(len(args))
copycat.workspace:122:         for object_ in self.objects():
copycat.workspace:123:             if object_:
copycat.workspace:124:                 object_.update_object_values()
copycat.workspace.wobject:143:         self.raw_importance = self.calculate_raw_importance()
copycat.workspace.wobject:61:         result = sum([rd.descriptor.activation for rd in self.relevant_descriptions()])
copycat.workspace.wobject:328:         return [d for d in self.descriptions if d.description_type.is_active()]
copycat.slipnet.slipnode:143:         return self.activation == 100
copycat.workspace.wobject:328:         return [d for d in self.descriptions if d.description_type.is_active()]
copycat.slipnet.slipnode:143:         return self.activation == 100
copycat.workspace.wobject:328:         return [d for d in self.descriptions if d.description_type.is_active()]
copycat.slipnet.slipnode:143:         return self.activation == 100
copycat.workspace.wobject:328:         return [d for d in self.descriptions if d.description_type.is_active()]
copycat.workspace.wobject:62:         if self.is_changed:
copycat.workspace.wobject:64:         if self.group:
copycat.workspace.wobject:66:         return result
copycat.workspace.wobject:144:         self.intra_sring_happiness = self.calculate_intra_string_happiness()
copycat.workspace.wobject:73:         if self.spans_whole_string():
copycat.workspace.wobject:189:         return self.letter_span() == self.string.length
copycat.workspace.wobject:158:         if self.groups == None:
copycat.workspace.wobject:159:             return 1
copycat.workspace.wobject:76:             if self.group:
copycat.workspace.wobject:79:                 if not self.bonds:
copycat.workspace.wobject:80:                     result = 0
copycat.workspace.wobject:87:         return result
copycat.workspace.wobject:145:         self.intra_string_unhappiness = self.calculate_intra_string_unhappiness()
copycat.workspace.wobject:90:         return 100 - self.intra_string_happiness
copycat.workspace.wobject:146:         self.inter_string_happiness = self.calculate_inter_string_happiness()
copycat.workspace.wobject:98:         if self.correspondence:
copycat.workspace.wobject:101:             return 0
copycat.workspace.wobject:147:         self.inter_string_unhappiness = self.calculate_inter_string_unhappiness()
copycat.workspace.wobject:104:         return 100 - self.inter_string_happiness
copycat.workspace.wobject:148:         self.total_happiness = self.calculate_total_happiness()
copycat.workspace.wobject:107:         return round(toolbox.average(self.intra_string_happiness,
copycat.workspace.wobject:108:                                       self.inter_string_happiness))
copycat.toolbox:96:     return sum(args) / float(len(args))
copycat.workspace.wobject:149:         self.total_unhappiness = self.calculate_total_unhappiness()
copycat.workspace.wobject:111:         return 100 - self.total_happiness
copycat.workspace.wobject:150:         self.intra_string_salience = self.calculate_intra_string_salience()
copycat.workspace.wobject:118:         if self.clamp_salience:
copycat.workspace.wobject:121:             return round(toolbox.weighted_average([2, 8],
copycat.workspace.wobject:122:                                                   [self.relative_importance,
copycat.workspace.wobject:123:                                                    self.intra_string_unhappiness]))
copycat.toolbox:24:     weight_sum = sum(weights)
copycat.toolbox:25:     value_sum = sum(map(lambda a, b: a * b, weights, values))
copycat.toolbox:25:     value_sum = sum(map(lambda a, b: a * b, weights, values))
copycat.toolbox:25:     value_sum = sum(map(lambda a, b: a * b, weights, values))
copycat.toolbox:26:     return int(value_sum / float(weight_sum))
copycat.workspace.wobject:151:         self.inter_string_salience = self.calculate_inter_string_salience()
copycat.workspace.wobject:130:         if self.clamp_salience:
copycat.workspace.wobject:133:             a = round(toolbox.weighted_average([8, 2],
copycat.workspace.wobject:134:                                                [self.relative_importance,
copycat.workspace.wobject:135:                                                self.inter_string_unhappiness]))
copycat.toolbox:24:     weight_sum = sum(weights)
copycat.toolbox:25:     value_sum = sum(map(lambda a, b: a * b, weights, values))
copycat.toolbox:25:     value_sum = sum(map(lambda a, b: a * b, weights, values))
copycat.toolbox:25:     value_sum = sum(map(lambda a, b: a * b, weights, values))
copycat.toolbox:26:     return int(value_sum / float(weight_sum))
copycat.workspace.wobject:136:             return a
copycat.workspace.wobject:152:         self.total_string_salience = self.calculate_total_salience()
copycat.workspace.wobject:139:         return round(toolbox.average(self.intra_string_salience,
copycat.workspace.wobject:140:                                      self.inter_string_salience))
copycat.toolbox:96:     return sum(args) / float(len(args))
copycat.workspace:122:         for object_ in self.objects():
copycat.workspace:123:             if object_:
copycat.workspace:122:         for object_ in self.objects():
copycat.workspace:123:             if object_:
copycat.workspace:122:         for object_ in self.objects():
copycat.workspace:123:             if object_:
copycat.workspace:122:         for object_ in self.objects():
copycat.workspace:126:         self.initial_string.update_relative_importances()
copycat.workspace.string:317:         raw_importance = sum([obj.raw_importance for obj in self.objects() if obj])
copycat.workspace.string:57:         return self.letters + self.groups
copycat.workspace.string:317:         raw_importance = sum([obj.raw_importance for obj in self.objects() if obj])
copycat.workspace.string:317:         raw_importance = sum([obj.raw_importance for obj in self.objects() if obj])
copycat.workspace.string:317:         raw_importance = sum([obj.raw_importance for obj in self.objects() if obj])
copycat.workspace.string:317:         raw_importance = sum([obj.raw_importance for obj in self.objects() if obj])
copycat.workspace.string:317:         raw_importance = sum([obj.raw_importance for obj in self.objects() if obj])
copycat.workspace.string:317:         raw_importance = sum([obj.raw_importance for obj in self.objects() if obj])
copycat.workspace.string:318:         for obj in self.objects():
copycat.workspace.string:57:         return self.letters + self.groups
copycat.workspace.string:319:             if not obj:
copycat.workspace.string:321:             if raw_importance == 0:
copycat.workspace.string:322:                 importance = 0
copycat.workspace.string:325:             obj.relative_importance = importance
copycat.workspace.string:318:         for obj in self.objects():
copycat.workspace.string:319:             if not obj:
copycat.workspace.string:321:             if raw_importance == 0:
copycat.workspace.string:322:                 importance = 0
copycat.workspace.string:325:             obj.relative_importance = importance
copycat.workspace.string:318:         for obj in self.objects():
copycat.workspace.string:319:             if not obj:
copycat.workspace.string:321:             if raw_importance == 0:
copycat.workspace.string:322:                 importance = 0
copycat.workspace.string:325:             obj.relative_importance = importance
copycat.workspace.string:318:         for obj in self.objects():
copycat.workspace.string:319:             if not obj:
copycat.workspace.string:320:                 continue
copycat.workspace.string:318:         for obj in self.objects():
copycat.workspace.string:319:             if not obj:
copycat.workspace.string:320:                 continue
copycat.workspace.string:318:         for obj in self.objects():
copycat.workspace.string:319:             if not obj:
copycat.workspace.string:320:                 continue
copycat.workspace.string:318:         for obj in self.objects():
copycat.workspace:127:         self.target_string.update_relative_importances()
copycat.workspace.string:317:         raw_importance = sum([obj.raw_importance for obj in self.objects() if obj])
copycat.workspace.string:57:         return self.letters + self.groups
copycat.workspace.string:317:         raw_importance = sum([obj.raw_importance for obj in self.objects() if obj])
copycat.workspace.string:317:         raw_importance = sum([obj.raw_importance for obj in self.objects() if obj])
copycat.workspace.string:317:         raw_importance = sum([obj.raw_importance for obj in self.objects() if obj])
copycat.workspace.string:317:         raw_importance = sum([obj.raw_importance for obj in self.objects() if obj])
copycat.workspace.string:317:         raw_importance = sum([obj.raw_importance for obj in self.objects() if obj])
copycat.workspace.string:317:         raw_importance = sum([obj.raw_importance for obj in self.objects() if obj])
copycat.workspace.string:318:         for obj in self.objects():
copycat.workspace.string:57:         return self.letters + self.groups
copycat.workspace.string:319:             if not obj:
copycat.workspace.string:321:             if raw_importance == 0:
copycat.workspace.string:322:                 importance = 0
copycat.workspace.string:325:             obj.relative_importance = importance
copycat.workspace.string:318:         for obj in self.objects():
copycat.workspace.string:319:             if not obj:
copycat.workspace.string:321:             if raw_importance == 0:
copycat.workspace.string:322:                 importance = 0
copycat.workspace.string:325:             obj.relative_importance = importance
copycat.workspace.string:318:         for obj in self.objects():
copycat.workspace.string:319:             if not obj:
copycat.workspace.string:321:             if raw_importance == 0:
copycat.workspace.string:322:                 importance = 0
copycat.workspace.string:325:             obj.relative_importance = importance
copycat.workspace.string:318:         for obj in self.objects():
copycat.workspace.string:319:             if not obj:
copycat.workspace.string:320:                 continue
copycat.workspace.string:318:         for obj in self.objects():
copycat.workspace.string:319:             if not obj:
copycat.workspace.string:320:                 continue
copycat.workspace.string:318:         for obj in self.objects():
copycat.workspace.string:319:             if not obj:
copycat.workspace.string:320:                 continue
copycat.workspace.string:318:         for obj in self.objects():
copycat.workspace:128:         self.initial_string.update_intra_string_unhappiness()
copycat.workspace.string:332:         unhappiness = [obj.intra_string_unhappiness for obj in self.objects() if obj]
copycat.workspace.string:57:         return self.letters + self.groups
copycat.workspace.string:332:         unhappiness = [obj.intra_string_unhappiness for obj in self.objects() if obj]
copycat.workspace.string:332:         unhappiness = [obj.intra_string_unhappiness for obj in self.objects() if obj]
copycat.workspace.string:332:         unhappiness = [obj.intra_string_unhappiness for obj in self.objects() if obj]
copycat.workspace.string:332:         unhappiness = [obj.intra_string_unhappiness for obj in self.objects() if obj]
copycat.workspace.string:332:         unhappiness = [obj.intra_string_unhappiness for obj in self.objects() if obj]
copycat.workspace.string:332:         unhappiness = [obj.intra_string_unhappiness for obj in self.objects() if obj]
copycat.workspace.string:333:         length = len(unhappiness)
copycat.workspace.string:334:         self.intra_string_unhappiness = sum(unhappiness) / length
copycat.workspace:129:         self.target_string.update_intra_string_unhappiness()
copycat.workspace.string:332:         unhappiness = [obj.intra_string_unhappiness for obj in self.objects() if obj]
copycat.workspace.string:57:         return self.letters + self.groups
copycat.workspace.string:332:         unhappiness = [obj.intra_string_unhappiness for obj in self.objects() if obj]
copycat.workspace.string:332:         unhappiness = [obj.intra_string_unhappiness for obj in self.objects() if obj]
copycat.workspace.string:332:         unhappiness = [obj.intra_string_unhappiness for obj in self.objects() if obj]
copycat.workspace.string:332:         unhappiness = [obj.intra_string_unhappiness for obj in self.objects() if obj]
copycat.workspace.string:332:         unhappiness = [obj.intra_string_unhappiness for obj in self.objects() if obj]
copycat.workspace.string:332:         unhappiness = [obj.intra_string_unhappiness for obj in self.objects() if obj]
copycat.workspace.string:333:         length = len(unhappiness)
copycat.workspace.string:334:         self.intra_string_unhappiness = sum(unhappiness) / length
copycat.workspace:131:         self.test_snag_condition()
copycat.workspace:148:         return # need to revisit this
copycat.workspace:133:         self.update_temperature()
copycat.workspace:872:         if not self.clamp_temperature:
copycat.workspace:873:             rule_weakness = 100
copycat.workspace:874:             if self.rule:
copycat.workspace:877:             self.temperature = toolbox.weighted_average([8, 2],
copycat.workspace:878:                                                         [self.total_unhappiness(),
copycat.workspace:1128:         return 30
copycat.workspace:879:                                                          rule_weakness])
copycat.toolbox:24:     weight_sum = sum(weights)
copycat.toolbox:25:     value_sum = sum(map(lambda a, b: a * b, weights, values))
copycat.toolbox:25:     value_sum = sum(map(lambda a, b: a * b, weights, values))
copycat.toolbox:25:     value_sum = sum(map(lambda a, b: a * b, weights, values))
copycat.toolbox:26:     return int(value_sum / float(weight_sum))
copycat.run:63:         if self.coderack.time == self.slipnet.clamp_time * self.timestep:
copycat.run:66:         self.coderack.update(self.workspace.temperature)
copycat.coderack:162:         self.temperature = temperature
copycat.run:67:         codelets = self.workspace.bottom_up_codelets()
copycat.workspace:1005:         types = [('description', DescriptionBottomUpScout, 30),
copycat.workspace:1006:                  ('bond', BondBottomUpScout, 30),
copycat.workspace:1007:                  ('group', GroupWholeStringScout, 30),
copycat.workspace:1008:                  ('replacement', ReplacementFinder, 30),
copycat.workspace:1009:                  ('correspondence', CorrespondenceBottomUpScout, 30),
copycat.workspace:1010:                  ('correspondence', CorrespondenceImportantObjectScout, 30),
copycat.workspace:1011:                  ('rule', RuleScout, 30),
copycat.workspace:1012:                  ('translator_rule', RuleTranslator, 30 if self.temperature > 25 else 60)]
copycat.workspace:1014:         codelets = [(Breaker(), 0)]
copycat.coderack.codelet:27:         self.arguments = arguments
copycat.coderack.codelet:28:         self.timestamp = None
copycat.coderack.codelet:29:         self.bin = None
copycat.workspace:1015:         for category, codelet, urgency in types:
copycat.workspace:1016:             codelets.extend(self.get_codelets(category, codelet, urgency))
copycat.workspace:992:             codelets = []
copycat.workspace:993:             probability = self.post_codelet_probability(category)
copycat.workspace:943:         probability = 0
copycat.workspace:944:         if category == 'description':
copycat.workspace:945:             probability = math.sqrt(self.temperature) / 100.
copycat.workspace:959:         return probability / 100.
copycat.workspace:994:             number = self.post_codelet_number(category)
copycat.workspace:966:         number = 0
copycat.workspace:967:         case = {'few': 1, 'medium': 2, 'many': 3}
copycat.workspace:968:         if category == 'description':
copycat.workspace:969:             number = 1
copycat.workspace:983:         return number
copycat.workspace:995:             if toolbox.flip_coin(probability):
copycat.toolbox:87:     if prob_of_true >= 1:
copycat.toolbox:89:     return select_assoc([[True, int(prob_of_true * 1000)]
copycat.toolbox:90:                         ,[False, int((1 - prob_of_true) * 1000)]])
copycat.toolbox:57:     if assoc_list == []:
copycat.toolbox:60:     probability_sum = 0
copycat.toolbox:61:     for item, probability in assoc_list:
copycat.toolbox:62:         probability_sum += probability
copycat.toolbox:61:     for item, probability in assoc_list:
copycat.toolbox:62:         probability_sum += probability
copycat.toolbox:61:     for item, probability in assoc_list:
copycat.toolbox:63:     if probability_sum <= 0:
copycat.toolbox:66:     value = random.uniform(0, probability_sum)
random:340:         return a + (b-a) * self.random()
copycat.toolbox:67:     new_probability_sum = 0
copycat.toolbox:68:     for item, probability in assoc_list:
copycat.toolbox:69:         new_probability_sum += probability
copycat.toolbox:70:         if new_probability_sum > value:
copycat.toolbox:68:     for item, probability in assoc_list:
copycat.toolbox:69:         new_probability_sum += probability
copycat.toolbox:70:         if new_probability_sum > value:
copycat.toolbox:71:             return item
copycat.workspace:998:             return codelets
copycat.workspace:1015:         for category, codelet, urgency in types:
copycat.workspace:1016:             codelets.extend(self.get_codelets(category, codelet, urgency))
copycat.workspace:992:             codelets = []
copycat.workspace:993:             probability = self.post_codelet_probability(category)
copycat.workspace:943:         probability = 0
copycat.workspace:944:         if category == 'description':
copycat.workspace:946:         elif category in ['bond', 'group']:
copycat.workspace:947:             probability = self.intra_string_unhappiness()
copycat.workspace:1132:         return 30
copycat.workspace:959:         return probability / 100.
copycat.workspace:994:             number = self.post_codelet_number(category)
copycat.workspace:966:         number = 0
copycat.workspace:967:         case = {'few': 1, 'medium': 2, 'many': 3}
copycat.workspace:968:         if category == 'description':
copycat.workspace:970:         elif category == 'bond':
copycat.workspace:971:             number = case[self.rough_number_of_unrelated_objects()]
copycat.workspace:1091:         number_of_unrelated_objects = len(self.unrelated_objects())
copycat.workspace:1046:         unrelated_objects = []
copycat.workspace:1047:         for obj in self.objects():
copycat.workspace:1020:         return self.initial_string.objects() + self.target_string.objects()
copycat.workspace.string:57:         return self.letters + self.groups
copycat.workspace.string:57:         return self.letters + self.groups
copycat.workspace:1048:             if not obj:
copycat.workspace:1050:             if not obj.spans_whole_string() and obj.group == None:
copycat.workspace.wobject:189:         return self.letter_span() == self.string.length
copycat.workspace.wobject:158:         if self.groups == None:
copycat.workspace.wobject:159:             return 1
copycat.workspace:1051:                 number_of_bonds = len(obj.incoming_bonds) + len(obj.outgoing_bonds)
copycat.workspace:1052:                 if obj.is_leftmost_in_string() or obj.is_rightmost_in_string():
copycat.workspace.wobject:171:         return self.left_string_position == 0
copycat.workspace:1053:                     if number_of_bonds == 0: unrelated_objects.append(obj)
copycat.workspace:1047:         for obj in self.objects():
copycat.workspace:1048:             if not obj:
copycat.workspace:1050:             if not obj.spans_whole_string() and obj.group == None:
copycat.workspace.wobject:189:         return self.letter_span() == self.string.length
copycat.workspace.wobject:158:         if self.groups == None:
copycat.workspace.wobject:159:             return 1
copycat.workspace:1051:                 number_of_bonds = len(obj.incoming_bonds) + len(obj.outgoing_bonds)
copycat.workspace:1052:                 if obj.is_leftmost_in_string() or obj.is_rightmost_in_string():
copycat.workspace.wobject:171:         return self.left_string_position == 0
copycat.workspace.wobject:174:         right_position = len(self.string.letters) - 1
copycat.workspace.wobject:175:         return self.right_string_position == right_position
copycat.workspace:1055:                     if number_of_bonds < 2: unrelated_objects.append(object)
copycat.workspace:1047:         for obj in self.objects():
copycat.workspace:1048:             if not obj:
copycat.workspace:1050:             if not obj.spans_whole_string() and obj.group == None:
copycat.workspace.wobject:189:         return self.letter_span() == self.string.length
copycat.workspace.wobject:158:         if self.groups == None:
copycat.workspace.wobject:159:             return 1
copycat.workspace:1051:                 number_of_bonds = len(obj.incoming_bonds) + len(obj.outgoing_bonds)
copycat.workspace:1052:                 if obj.is_leftmost_in_string() or obj.is_rightmost_in_string():
copycat.workspace.wobject:171:         return self.left_string_position == 0
copycat.workspace.wobject:174:         right_position = len(self.string.letters) - 1
copycat.workspace.wobject:175:         return self.right_string_position == right_position
copycat.workspace:1053:                     if number_of_bonds == 0: unrelated_objects.append(obj)
copycat.workspace:1047:         for obj in self.objects():
copycat.workspace:1048:             if not obj:
copycat.workspace:1049:                 continue
copycat.workspace:1047:         for obj in self.objects():
copycat.workspace:1048:             if not obj:
copycat.workspace:1049:                 continue
copycat.workspace:1047:         for obj in self.objects():
copycat.workspace:1048:             if not obj:
copycat.workspace:1049:                 continue
copycat.workspace:1047:         for obj in self.objects():
copycat.workspace:1048:             if not obj:
copycat.workspace:1050:             if not obj.spans_whole_string() and obj.group == None:
copycat.workspace.wobject:189:         return self.letter_span() == self.string.length
copycat.workspace.wobject:158:         if self.groups == None:
copycat.workspace.wobject:159:             return 1
copycat.workspace:1051:                 number_of_bonds = len(obj.incoming_bonds) + len(obj.outgoing_bonds)
copycat.workspace:1052:                 if obj.is_leftmost_in_string() or obj.is_rightmost_in_string():
copycat.workspace.wobject:171:         return self.left_string_position == 0
copycat.workspace:1053:                     if number_of_bonds == 0: unrelated_objects.append(obj)
copycat.workspace:1047:         for obj in self.objects():
copycat.workspace:1048:             if not obj:
copycat.workspace:1050:             if not obj.spans_whole_string() and obj.group == None:
copycat.workspace.wobject:189:         return self.letter_span() == self.string.length
copycat.workspace.wobject:158:         if self.groups == None:
copycat.workspace.wobject:159:             return 1
copycat.workspace:1051:                 number_of_bonds = len(obj.incoming_bonds) + len(obj.outgoing_bonds)
copycat.workspace:1052:                 if obj.is_leftmost_in_string() or obj.is_rightmost_in_string():
copycat.workspace.wobject:171:         return self.left_string_position == 0
copycat.workspace.wobject:174:         right_position = len(self.string.letters) - 1
copycat.workspace.wobject:175:         return self.right_string_position == right_position
copycat.workspace:1055:                     if number_of_bonds < 2: unrelated_objects.append(object)
copycat.workspace:1047:         for obj in self.objects():
copycat.workspace:1048:             if not obj:
copycat.workspace:1050:             if not obj.spans_whole_string() and obj.group == None:
copycat.workspace.wobject:189:         return self.letter_span() == self.string.length
copycat.workspace.wobject:158:         if self.groups == None:
copycat.workspace.wobject:159:             return 1
copycat.workspace:1051:                 number_of_bonds = len(obj.incoming_bonds) + len(obj.outgoing_bonds)
copycat.workspace:1052:                 if obj.is_leftmost_in_string() or obj.is_rightmost_in_string():
copycat.workspace.wobject:171:         return self.left_string_position == 0
copycat.workspace.wobject:174:         right_position = len(self.string.letters) - 1
copycat.workspace.wobject:175:         return self.right_string_position == right_position
copycat.workspace:1053:                     if number_of_bonds == 0: unrelated_objects.append(obj)
copycat.workspace:1047:         for obj in self.objects():
copycat.workspace:1048:             if not obj:
copycat.workspace:1049:                 continue
copycat.workspace:1047:         for obj in self.objects():
copycat.workspace:1048:             if not obj:
copycat.workspace:1049:                 continue
copycat.workspace:1047:         for obj in self.objects():
copycat.workspace:1048:             if not obj:
copycat.workspace:1049:                 continue
copycat.workspace:1047:         for obj in self.objects():
copycat.workspace:1056:         return unrelated_objects
copycat.workspace:1092:         if number_of_unrelated_objects < toolbox.blur(2):
copycat.toolbox:102:     return random.normalvariate(number, math.sqrt(number))
random:357:         random = self.random
random:358:         while 1:
random:359:             u1 = random()
random:360:             u2 = 1.0 - random()
random:361:             z = NV_MAGICCONST*(u1-0.5)/u2
random:362:             zz = z*z/4.0
random:363:             if zz <= -_log(u2):
random:364:                 break
random:365:         return mu + z*sigma
copycat.workspace:1094:         elif number_of_unrelated_objects < toolbox.blur(4):
copycat.toolbox:102:     return random.normalvariate(number, math.sqrt(number))
random:357:         random = self.random
random:358:         while 1:
random:359:             u1 = random()
random:360:             u2 = 1.0 - random()
random:361:             z = NV_MAGICCONST*(u1-0.5)/u2
random:362:             zz = z*z/4.0
random:363:             if zz <= -_log(u2):
random:364:                 break
random:365:         return mu + z*sigma
copycat.workspace:1097:             return 'many'
copycat.workspace:983:         return number
copycat.workspace:995:             if toolbox.flip_coin(probability):
copycat.toolbox:87:     if prob_of_true >= 1:
copycat.toolbox:89:     return select_assoc([[True, int(prob_of_true * 1000)]
copycat.toolbox:90:                         ,[False, int((1 - prob_of_true) * 1000)]])
copycat.toolbox:57:     if assoc_list == []:
copycat.toolbox:60:     probability_sum = 0
copycat.toolbox:61:     for item, probability in assoc_list:
copycat.toolbox:62:         probability_sum += probability
copycat.toolbox:61:     for item, probability in assoc_list:
copycat.toolbox:62:         probability_sum += probability
copycat.toolbox:61:     for item, probability in assoc_list:
copycat.toolbox:63:     if probability_sum <= 0:
copycat.toolbox:66:     value = random.uniform(0, probability_sum)
random:340:         return a + (b-a) * self.random()
copycat.toolbox:67:     new_probability_sum = 0
copycat.toolbox:68:     for item, probability in assoc_list:
copycat.toolbox:69:         new_probability_sum += probability
copycat.toolbox:70:         if new_probability_sum > value:
copycat.toolbox:68:     for item, probability in assoc_list:
copycat.toolbox:69:         new_probability_sum += probability
copycat.toolbox:70:         if new_probability_sum > value:
copycat.toolbox:71:             return item
copycat.workspace:998:             return codelets
copycat.workspace:1015:         for category, codelet, urgency in types:
copycat.workspace:1016:             codelets.extend(self.get_codelets(category, codelet, urgency))
copycat.workspace:992:             codelets = []
copycat.workspace:993:             probability = self.post_codelet_probability(category)
copycat.workspace:943:         probability = 0
copycat.workspace:944:         if category == 'description':
copycat.workspace:946:         elif category in ['bond', 'group']:
copycat.workspace:947:             probability = self.intra_string_unhappiness()
copycat.workspace:1132:         return 30
copycat.workspace:959:         return probability / 100.
copycat.workspace:994:             number = self.post_codelet_number(category)
copycat.workspace:966:         number = 0
copycat.workspace:967:         case = {'few': 1, 'medium': 2, 'many': 3}
copycat.workspace:968:         if category == 'description':
copycat.workspace:970:         elif category == 'bond':
copycat.workspace:972:         elif category == 'group' and self.bonds:
copycat.workspace:973:             number = case[self.rough_number_of_ungrouped_objects()]
copycat.workspace:1100:         number_of_ungrouped_objects = len(self.ungrouped_objects())
copycat.workspace:1059:         ungrouped_objects = []
copycat.workspace:1060:         for obj in self.objects():
copycat.workspace:1020:         return self.initial_string.objects() + self.target_string.objects()
copycat.workspace.string:57:         return self.letters + self.groups
copycat.workspace.string:57:         return self.letters + self.groups
copycat.workspace:1061:             if not obj:
copycat.workspace:1063:             if not obj.spans_whole_string() and obj.group == None:
copycat.workspace.wobject:189:         return self.letter_span() == self.string.length
copycat.workspace.wobject:158:         if self.groups == None:
copycat.workspace.wobject:159:             return 1
copycat.workspace:1064:                 ungrouped_objects.append(obj)
copycat.workspace:1060:         for obj in self.objects():
copycat.workspace:1061:             if not obj:
copycat.workspace:1063:             if not obj.spans_whole_string() and obj.group == None:
copycat.workspace.wobject:189:         return self.letter_span() == self.string.length
copycat.workspace.wobject:158:         if self.groups == None:
copycat.workspace.wobject:159:             return 1
copycat.workspace:1064:                 ungrouped_objects.append(obj)
copycat.workspace:1060:         for obj in self.objects():
copycat.workspace:1061:             if not obj:
copycat.workspace:1063:             if not obj.spans_whole_string() and obj.group == None:
copycat.workspace.wobject:189:         return self.letter_span() == self.string.length
copycat.workspace.wobject:158:         if self.groups == None:
copycat.workspace.wobject:159:             return 1
copycat.workspace:1064:                 ungrouped_objects.append(obj)
copycat.workspace:1060:         for obj in self.objects():
copycat.workspace:1061:             if not obj:
copycat.workspace:1062:                 continue
copycat.workspace:1060:         for obj in self.objects():
copycat.workspace:1061:             if not obj:
copycat.workspace:1062:                 continue
copycat.workspace:1060:         for obj in self.objects():
copycat.workspace:1061:             if not obj:
copycat.workspace:1062:                 continue
copycat.workspace:1060:         for obj in self.objects():
copycat.workspace:1061:             if not obj:
copycat.workspace:1063:             if not obj.spans_whole_string() and obj.group == None:
copycat.workspace.wobject:189:         return self.letter_span() == self.string.length
copycat.workspace.wobject:158:         if self.groups == None:
copycat.workspace.wobject:159:             return 1
copycat.workspace:1064:                 ungrouped_objects.append(obj)
copycat.workspace:1060:         for obj in self.objects():
copycat.workspace:1061:             if not obj:
copycat.workspace:1063:             if not obj.spans_whole_string() and obj.group == None:
copycat.workspace.wobject:189:         return self.letter_span() == self.string.length
copycat.workspace.wobject:158:         if self.groups == None:
copycat.workspace.wobject:159:             return 1
copycat.workspace:1064:                 ungrouped_objects.append(obj)
copycat.workspace:1060:         for obj in self.objects():
copycat.workspace:1061:             if not obj:
copycat.workspace:1063:             if not obj.spans_whole_string() and obj.group == None:
copycat.workspace.wobject:189:         return self.letter_span() == self.string.length
copycat.workspace.wobject:158:         if self.groups == None:
copycat.workspace.wobject:159:             return 1
copycat.workspace:1064:                 ungrouped_objects.append(obj)
copycat.workspace:1060:         for obj in self.objects():
copycat.workspace:1061:             if not obj:
copycat.workspace:1062:                 continue
copycat.workspace:1060:         for obj in self.objects():
copycat.workspace:1061:             if not obj:
copycat.workspace:1062:                 continue
copycat.workspace:1060:         for obj in self.objects():
copycat.workspace:1061:             if not obj:
copycat.workspace:1062:                 continue
copycat.workspace:1060:         for obj in self.objects():
copycat.workspace:1065:         return ungrouped_objects
copycat.workspace:1101:         if number_of_ungrouped_objects < toolbox.blur(2):
copycat.toolbox:102:     return random.normalvariate(number, math.sqrt(number))
random:357:         random = self.random
random:358:         while 1:
random:359:             u1 = random()
random:360:             u2 = 1.0 - random()
random:361:             z = NV_MAGICCONST*(u1-0.5)/u2
random:362:             zz = z*z/4.0
random:363:             if zz <= -_log(u2):
random:359:             u1 = random()
random:360:             u2 = 1.0 - random()
random:361:             z = NV_MAGICCONST*(u1-0.5)/u2
random:362:             zz = z*z/4.0
random:363:             if zz <= -_log(u2):
random:364:                 break
random:365:         return mu + z*sigma
copycat.workspace:1103:         elif number_of_ungrouped_objects < toolbox.blur(4):
copycat.toolbox:102:     return random.normalvariate(number, math.sqrt(number))
random:357:         random = self.random
random:358:         while 1:
random:359:             u1 = random()
random:360:             u2 = 1.0 - random()
random:361:             z = NV_MAGICCONST*(u1-0.5)/u2
random:362:             zz = z*z/4.0
random:363:             if zz <= -_log(u2):
random:364:                 break
random:365:         return mu + z*sigma
copycat.workspace:1106:             return 'many'
copycat.workspace:983:         return number
copycat.workspace:995:             if toolbox.flip_coin(probability):
copycat.toolbox:87:     if prob_of_true >= 1:
copycat.toolbox:89:     return select_assoc([[True, int(prob_of_true * 1000)]
copycat.toolbox:90:                         ,[False, int((1 - prob_of_true) * 1000)]])
copycat.toolbox:57:     if assoc_list == []:
copycat.toolbox:60:     probability_sum = 0
copycat.toolbox:61:     for item, probability in assoc_list:
copycat.toolbox:62:         probability_sum += probability
copycat.toolbox:61:     for item, probability in assoc_list:
copycat.toolbox:62:         probability_sum += probability
copycat.toolbox:61:     for item, probability in assoc_list:
copycat.toolbox:63:     if probability_sum <= 0:
copycat.toolbox:66:     value = random.uniform(0, probability_sum)
random:340:         return a + (b-a) * self.random()
copycat.toolbox:67:     new_probability_sum = 0
copycat.toolbox:68:     for item, probability in assoc_list:
copycat.toolbox:69:         new_probability_sum += probability
copycat.toolbox:70:         if new_probability_sum > value:
copycat.toolbox:71:             return item
copycat.workspace:996:                 for i in range(number):
copycat.workspace:997:                     codelets.append((codelet(args), urgency))
copycat.coderack.codelet:27:         self.arguments = arguments
copycat.coderack.codelet:28:         self.timestamp = None
copycat.coderack.codelet:29:         self.bin = None
copycat.workspace:996:                 for i in range(number):
copycat.workspace:997:                     codelets.append((codelet(args), urgency))
copycat.coderack.codelet:27:         self.arguments = arguments
copycat.coderack.codelet:28:         self.timestamp = None
copycat.coderack.codelet:29:         self.bin = None
copycat.workspace:996:                 for i in range(number):
copycat.workspace:997:                     codelets.append((codelet(args), urgency))
copycat.coderack.codelet:27:         self.arguments = arguments
copycat.coderack.codelet:28:         self.timestamp = None
copycat.coderack.codelet:29:         self.bin = None
copycat.workspace:996:                 for i in range(number):
copycat.workspace:998:             return codelets
copycat.workspace:1015:         for category, codelet, urgency in types:
copycat.workspace:1016:             codelets.extend(self.get_codelets(category, codelet, urgency))
copycat.workspace:992:             codelets = []
copycat.workspace:993:             probability = self.post_codelet_probability(category)
copycat.workspace:943:         probability = 0
copycat.workspace:944:         if category == 'description':
copycat.workspace:946:         elif category in ['bond', 'group']:
copycat.workspace:948:         elif category == 'replacement' and self.unreplaced_objects():
copycat.workspace:1075:         unreplaced_objects = []
copycat.workspace:1076:         for letter in self.initial_string.letters:
copycat.workspace:1077:             if letter.replacement == None:
copycat.workspace:1078:                 unreplaced_objects.append(letter)
copycat.workspace:1076:         for letter in self.initial_string.letters:
copycat.workspace:1077:             if letter.replacement == None:
copycat.workspace:1078:                 unreplaced_objects.append(letter)
copycat.workspace:1076:         for letter in self.initial_string.letters:
copycat.workspace:1077:             if letter.replacement == None:
copycat.workspace:1078:                 unreplaced_objects.append(letter)
copycat.workspace:1076:         for letter in self.initial_string.letters:
copycat.workspace:1079:         return unreplaced_objects
copycat.workspace:949:             probability = 100
copycat.workspace:959:         return probability / 100.
copycat.workspace:994:             number = self.post_codelet_number(category)
copycat.workspace:966:         number = 0
copycat.workspace:967:         case = {'few': 1, 'medium': 2, 'many': 3}
copycat.workspace:968:         if category == 'description':
copycat.workspace:970:         elif category == 'bond':
copycat.workspace:972:         elif category == 'group' and self.bonds:
copycat.workspace:974:         elif category == 'replacement' and self.rule:
copycat.workspace:976:         elif category == 'correspondence':
copycat.workspace:978:         elif category == 'rule':
copycat.workspace:980:         elif category == 'translated_rule' and self.rule:
copycat.workspace:983:         return number
copycat.workspace:995:             if toolbox.flip_coin(probability):
copycat.toolbox:87:     if prob_of_true >= 1:
copycat.toolbox:88:         return True
copycat.workspace:996:                 for i in range(number):
copycat.workspace:998:             return codelets
copycat.workspace:1015:         for category, codelet, urgency in types:
copycat.workspace:1016:             codelets.extend(self.get_codelets(category, codelet, urgency))
copycat.workspace:992:             codelets = []
copycat.workspace:993:             probability = self.post_codelet_probability(category)
copycat.workspace:943:         probability = 0
copycat.workspace:944:         if category == 'description':
copycat.workspace:946:         elif category in ['bond', 'group']:
copycat.workspace:948:         elif category == 'replacement' and self.unreplaced_objects():
copycat.workspace:950:         elif category == 'correspondence':
copycat.workspace:951:             probability = self.inter_string_unhappiness()
copycat.workspace:1136:         return 30
copycat.workspace:959:         return probability / 100.
copycat.workspace:994:             number = self.post_codelet_number(category)
copycat.workspace:966:         number = 0
copycat.workspace:967:         case = {'few': 1, 'medium': 2, 'many': 3}
copycat.workspace:968:         if category == 'description':
copycat.workspace:970:         elif category == 'bond':
copycat.workspace:972:         elif category == 'group' and self.bonds:
copycat.workspace:974:         elif category == 'replacement' and self.rule:
copycat.workspace:976:         elif category == 'correspondence':
copycat.workspace:977:             number = case[self.rough_number_of_uncorresponding_objects()]
copycat.workspace:1118:         number_of_uncorresponding_objects = len(self.uncorresponding_objects())
copycat.workspace:1082:         uncorresponding_objects = []
copycat.workspace:1083:         for obj in self.objects():
copycat.workspace:1020:         return self.initial_string.objects() + self.target_string.objects()
copycat.workspace.string:57:         return self.letters + self.groups
copycat.workspace.string:57:         return self.letters + self.groups
copycat.workspace:1084:             if not obj:
copycat.workspace:1086:             if obj.correspondence == None:
copycat.workspace:1087:                 uncorresponding_objects.append(obj)
copycat.workspace:1083:         for obj in self.objects():
copycat.workspace:1084:             if not obj:
copycat.workspace:1086:             if obj.correspondence == None:
copycat.workspace:1087:                 uncorresponding_objects.append(obj)
copycat.workspace:1083:         for obj in self.objects():
copycat.workspace:1084:             if not obj:
copycat.workspace:1086:             if obj.correspondence == None:
copycat.workspace:1087:                 uncorresponding_objects.append(obj)
copycat.workspace:1083:         for obj in self.objects():
copycat.workspace:1084:             if not obj:
copycat.workspace:1085:                 continue
copycat.workspace:1083:         for obj in self.objects():
copycat.workspace:1084:             if not obj:
copycat.workspace:1085:                 continue
copycat.workspace:1083:         for obj in self.objects():
copycat.workspace:1084:             if not obj:
copycat.workspace:1085:                 continue
copycat.workspace:1083:         for obj in self.objects():
copycat.workspace:1084:             if not obj:
copycat.workspace:1086:             if obj.correspondence == None:
copycat.workspace:1087:                 uncorresponding_objects.append(obj)
copycat.workspace:1083:         for obj in self.objects():
copycat.workspace:1084:             if not obj:
copycat.workspace:1086:             if obj.correspondence == None:
copycat.workspace:1087:                 uncorresponding_objects.append(obj)
copycat.workspace:1083:         for obj in self.objects():
copycat.workspace:1084:             if not obj:
copycat.workspace:1086:             if obj.correspondence == None:
copycat.workspace:1087:                 uncorresponding_objects.append(obj)
copycat.workspace:1083:         for obj in self.objects():
copycat.workspace:1084:             if not obj:
copycat.workspace:1085:                 continue
copycat.workspace:1083:         for obj in self.objects():
copycat.workspace:1084:             if not obj:
copycat.workspace:1085:                 continue
copycat.workspace:1083:         for obj in self.objects():
copycat.workspace:1084:             if not obj:
copycat.workspace:1085:                 continue
copycat.workspace:1083:         for obj in self.objects():
copycat.workspace:1088:         return uncorresponding_objects
copycat.workspace:1119:         if number_of_uncorresponding_objects < toolbox.blur(2):
copycat.toolbox:102:     return random.normalvariate(number, math.sqrt(number))
random:357:         random = self.random
random:358:         while 1:
random:359:             u1 = random()
random:360:             u2 = 1.0 - random()
random:361:             z = NV_MAGICCONST*(u1-0.5)/u2
random:362:             zz = z*z/4.0
random:363:             if zz <= -_log(u2):
random:364:                 break
random:365:         return mu + z*sigma
copycat.workspace:1121:         elif number_of_uncorresponding_objects < toolbox.blur(4):
copycat.toolbox:102:     return random.normalvariate(number, math.sqrt(number))
random:357:         random = self.random
random:358:         while 1:
random:359:             u1 = random()
random:360:             u2 = 1.0 - random()
random:361:             z = NV_MAGICCONST*(u1-0.5)/u2
random:362:             zz = z*z/4.0
random:363:             if zz <= -_log(u2):
random:364:                 break
random:365:         return mu + z*sigma
copycat.workspace:1124:             return 'many'
copycat.workspace:983:         return number
copycat.workspace:995:             if toolbox.flip_coin(probability):
copycat.toolbox:87:     if prob_of_true >= 1:
copycat.toolbox:89:     return select_assoc([[True, int(prob_of_true * 1000)]
copycat.toolbox:90:                         ,[False, int((1 - prob_of_true) * 1000)]])
copycat.toolbox:57:     if assoc_list == []:
copycat.toolbox:60:     probability_sum = 0
copycat.toolbox:61:     for item, probability in assoc_list:
copycat.toolbox:62:         probability_sum += probability
copycat.toolbox:61:     for item, probability in assoc_list:
copycat.toolbox:62:         probability_sum += probability
copycat.toolbox:61:     for item, probability in assoc_list:
copycat.toolbox:63:     if probability_sum <= 0:
copycat.toolbox:66:     value = random.uniform(0, probability_sum)
random:340:         return a + (b-a) * self.random()
copycat.toolbox:67:     new_probability_sum = 0
copycat.toolbox:68:     for item, probability in assoc_list:
copycat.toolbox:69:         new_probability_sum += probability
copycat.toolbox:70:         if new_probability_sum > value:
copycat.toolbox:68:     for item, probability in assoc_list:
copycat.toolbox:69:         new_probability_sum += probability
copycat.toolbox:70:         if new_probability_sum > value:
copycat.toolbox:71:             return item
copycat.workspace:998:             return codelets
copycat.workspace:1015:         for category, codelet, urgency in types:
copycat.workspace:1016:             codelets.extend(self.get_codelets(category, codelet, urgency))
copycat.workspace:992:             codelets = []
copycat.workspace:993:             probability = self.post_codelet_probability(category)
copycat.workspace:943:         probability = 0
copycat.workspace:944:         if category == 'description':
copycat.workspace:946:         elif category in ['bond', 'group']:
copycat.workspace:948:         elif category == 'replacement' and self.unreplaced_objects():
copycat.workspace:950:         elif category == 'correspondence':
copycat.workspace:951:             probability = self.inter_string_unhappiness()
copycat.workspace:1136:         return 30
copycat.workspace:959:         return probability / 100.
copycat.workspace:994:             number = self.post_codelet_number(category)
copycat.workspace:966:         number = 0
copycat.workspace:967:         case = {'few': 1, 'medium': 2, 'many': 3}
copycat.workspace:968:         if category == 'description':
copycat.workspace:970:         elif category == 'bond':
copycat.workspace:972:         elif category == 'group' and self.bonds:
copycat.workspace:974:         elif category == 'replacement' and self.rule:
copycat.workspace:976:         elif category == 'correspondence':
copycat.workspace:977:             number = case[self.rough_number_of_uncorresponding_objects()]
copycat.workspace:1118:         number_of_uncorresponding_objects = len(self.uncorresponding_objects())
copycat.workspace:1082:         uncorresponding_objects = []
copycat.workspace:1083:         for obj in self.objects():
copycat.workspace:1020:         return self.initial_string.objects() + self.target_string.objects()
copycat.workspace.string:57:         return self.letters + self.groups
copycat.workspace.string:57:         return self.letters + self.groups
copycat.workspace:1084:             if not obj:
copycat.workspace:1086:             if obj.correspondence == None:
copycat.workspace:1087:                 uncorresponding_objects.append(obj)
copycat.workspace:1083:         for obj in self.objects():
copycat.workspace:1084:             if not obj:
copycat.workspace:1086:             if obj.correspondence == None:
copycat.workspace:1087:                 uncorresponding_objects.append(obj)
copycat.workspace:1083:         for obj in self.objects():
copycat.workspace:1084:             if not obj:
copycat.workspace:1086:             if obj.correspondence == None:
copycat.workspace:1087:                 uncorresponding_objects.append(obj)
copycat.workspace:1083:         for obj in self.objects():
copycat.workspace:1084:             if not obj:
copycat.workspace:1085:                 continue
copycat.workspace:1083:         for obj in self.objects():
copycat.workspace:1084:             if not obj:
copycat.workspace:1085:                 continue
copycat.workspace:1083:         for obj in self.objects():
copycat.workspace:1084:             if not obj:
copycat.workspace:1085:                 continue
copycat.workspace:1083:         for obj in self.objects():
copycat.workspace:1084:             if not obj:
copycat.workspace:1086:             if obj.correspondence == None:
copycat.workspace:1087:                 uncorresponding_objects.append(obj)
copycat.workspace:1083:         for obj in self.objects():
copycat.workspace:1084:             if not obj:
copycat.workspace:1086:             if obj.correspondence == None:
copycat.workspace:1087:                 uncorresponding_objects.append(obj)
copycat.workspace:1083:         for obj in self.objects():
copycat.workspace:1084:             if not obj:
copycat.workspace:1086:             if obj.correspondence == None:
copycat.workspace:1087:                 uncorresponding_objects.append(obj)
copycat.workspace:1083:         for obj in self.objects():
copycat.workspace:1084:             if not obj:
copycat.workspace:1085:                 continue
copycat.workspace:1083:         for obj in self.objects():
copycat.workspace:1084:             if not obj:
copycat.workspace:1085:                 continue
copycat.workspace:1083:         for obj in self.objects():
copycat.workspace:1084:             if not obj:
copycat.workspace:1085:                 continue
copycat.workspace:1083:         for obj in self.objects():
copycat.workspace:1088:         return uncorresponding_objects
copycat.workspace:1119:         if number_of_uncorresponding_objects < toolbox.blur(2):
copycat.toolbox:102:     return random.normalvariate(number, math.sqrt(number))
random:357:         random = self.random
random:358:         while 1:
random:359:             u1 = random()
random:360:             u2 = 1.0 - random()
random:361:             z = NV_MAGICCONST*(u1-0.5)/u2
random:362:             zz = z*z/4.0
random:363:             if zz <= -_log(u2):
random:359:             u1 = random()
random:360:             u2 = 1.0 - random()
random:361:             z = NV_MAGICCONST*(u1-0.5)/u2
random:362:             zz = z*z/4.0
random:363:             if zz <= -_log(u2):
random:364:                 break
random:365:         return mu + z*sigma
copycat.workspace:1121:         elif number_of_uncorresponding_objects < toolbox.blur(4):
copycat.toolbox:102:     return random.normalvariate(number, math.sqrt(number))
random:357:         random = self.random
random:358:         while 1:
random:359:             u1 = random()
random:360:             u2 = 1.0 - random()
random:361:             z = NV_MAGICCONST*(u1-0.5)/u2
random:362:             zz = z*z/4.0
random:363:             if zz <= -_log(u2):
random:364:                 break
random:365:         return mu + z*sigma
copycat.workspace:1124:             return 'many'
copycat.workspace:983:         return number
copycat.workspace:995:             if toolbox.flip_coin(probability):
copycat.toolbox:87:     if prob_of_true >= 1:
copycat.toolbox:89:     return select_assoc([[True, int(prob_of_true * 1000)]
copycat.toolbox:90:                         ,[False, int((1 - prob_of_true) * 1000)]])
copycat.toolbox:57:     if assoc_list == []:
copycat.toolbox:60:     probability_sum = 0
copycat.toolbox:61:     for item, probability in assoc_list:
copycat.toolbox:62:         probability_sum += probability
copycat.toolbox:61:     for item, probability in assoc_list:
copycat.toolbox:62:         probability_sum += probability
copycat.toolbox:61:     for item, probability in assoc_list:
copycat.toolbox:63:     if probability_sum <= 0:
copycat.toolbox:66:     value = random.uniform(0, probability_sum)
random:340:         return a + (b-a) * self.random()
copycat.toolbox:67:     new_probability_sum = 0
copycat.toolbox:68:     for item, probability in assoc_list:
copycat.toolbox:69:         new_probability_sum += probability
copycat.toolbox:70:         if new_probability_sum > value:
copycat.toolbox:68:     for item, probability in assoc_list:
copycat.toolbox:69:         new_probability_sum += probability
copycat.toolbox:70:         if new_probability_sum > value:
copycat.toolbox:71:             return item
copycat.workspace:998:             return codelets
copycat.workspace:1015:         for category, codelet, urgency in types:
copycat.workspace:1016:             codelets.extend(self.get_codelets(category, codelet, urgency))
copycat.workspace:992:             codelets = []
copycat.workspace:993:             probability = self.post_codelet_probability(category)
copycat.workspace:943:         probability = 0
copycat.workspace:944:         if category == 'description':
copycat.workspace:946:         elif category in ['bond', 'group']:
copycat.workspace:948:         elif category == 'replacement' and self.unreplaced_objects():
copycat.workspace:950:         elif category == 'correspondence':
copycat.workspace:952:         elif category == 'rule' and self.rule:
copycat.workspace:954:         elif category == 'rule':
copycat.workspace:955:             probability = 100
copycat.workspace:959:         return probability / 100.
copycat.workspace:994:             number = self.post_codelet_number(category)
copycat.workspace:966:         number = 0
copycat.workspace:967:         case = {'few': 1, 'medium': 2, 'many': 3}
copycat.workspace:968:         if category == 'description':
copycat.workspace:970:         elif category == 'bond':
copycat.workspace:972:         elif category == 'group' and self.bonds:
copycat.workspace:974:         elif category == 'replacement' and self.rule:
copycat.workspace:976:         elif category == 'correspondence':
copycat.workspace:978:         elif category == 'rule':
copycat.workspace:979:             number = 2
copycat.workspace:983:         return number
copycat.workspace:995:             if toolbox.flip_coin(probability):
copycat.toolbox:87:     if prob_of_true >= 1:
copycat.toolbox:88:         return True
copycat.workspace:996:                 for i in range(number):
copycat.workspace:997:                     codelets.append((codelet(args), urgency))
copycat.coderack.codelet:27:         self.arguments = arguments
copycat.coderack.codelet:28:         self.timestamp = None
copycat.coderack.codelet:29:         self.bin = None
copycat.workspace:996:                 for i in range(number):
copycat.workspace:997:                     codelets.append((codelet(args), urgency))
copycat.coderack.codelet:27:         self.arguments = arguments
copycat.coderack.codelet:28:         self.timestamp = None
copycat.coderack.codelet:29:         self.bin = None
copycat.workspace:996:                 for i in range(number):
copycat.workspace:998:             return codelets
copycat.workspace:1015:         for category, codelet, urgency in types:
copycat.workspace:1016:             codelets.extend(self.get_codelets(category, codelet, urgency))
copycat.workspace:992:             codelets = []
copycat.workspace:993:             probability = self.post_codelet_probability(category)
copycat.workspace:943:         probability = 0
copycat.workspace:944:         if category == 'description':
copycat.workspace:946:         elif category in ['bond', 'group']:
copycat.workspace:948:         elif category == 'replacement' and self.unreplaced_objects():
copycat.workspace:950:         elif category == 'correspondence':
copycat.workspace:952:         elif category == 'rule' and self.rule:
copycat.workspace:954:         elif category == 'rule':
copycat.workspace:956:         elif category == 'translated_rule' and self.rule:
copycat.workspace:959:         return probability / 100.
copycat.workspace:994:             number = self.post_codelet_number(category)
copycat.workspace:966:         number = 0
copycat.workspace:967:         case = {'few': 1, 'medium': 2, 'many': 3}
copycat.workspace:968:         if category == 'description':
copycat.workspace:970:         elif category == 'bond':
copycat.workspace:972:         elif category == 'group' and self.bonds:
copycat.workspace:974:         elif category == 'replacement' and self.rule:
copycat.workspace:976:         elif category == 'correspondence':
copycat.workspace:978:         elif category == 'rule':
copycat.workspace:980:         elif category == 'translated_rule' and self.rule:
copycat.workspace:983:         return number
copycat.workspace:995:             if toolbox.flip_coin(probability):
copycat.toolbox:87:     if prob_of_true >= 1:
copycat.toolbox:89:     return select_assoc([[True, int(prob_of_true * 1000)]
copycat.toolbox:90:                         ,[False, int((1 - prob_of_true) * 1000)]])
copycat.toolbox:57:     if assoc_list == []:
copycat.toolbox:60:     probability_sum = 0
copycat.toolbox:61:     for item, probability in assoc_list:
copycat.toolbox:62:         probability_sum += probability
copycat.toolbox:61:     for item, probability in assoc_list:
copycat.toolbox:62:         probability_sum += probability
copycat.toolbox:61:     for item, probability in assoc_list:
copycat.toolbox:63:     if probability_sum <= 0:
copycat.toolbox:66:     value = random.uniform(0, probability_sum)
random:340:         return a + (b-a) * self.random()
copycat.toolbox:67:     new_probability_sum = 0
copycat.toolbox:68:     for item, probability in assoc_list:
copycat.toolbox:69:         new_probability_sum += probability
copycat.toolbox:70:         if new_probability_sum > value:
copycat.toolbox:68:     for item, probability in assoc_list:
copycat.toolbox:69:         new_probability_sum += probability
copycat.toolbox:70:         if new_probability_sum > value:
copycat.toolbox:71:             return item
copycat.workspace:998:             return codelets
copycat.workspace:1015:         for category, codelet, urgency in types:
copycat.workspace:1017:         return codelets
copycat.run:68:         top_down_codelet_types = self.slipnet.top_down_codelets()
copycat.slipnet:366:         codelets = []
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:368:             if node.activation >= 50:
copycat.slipnet:367:         for node in self.slipnodes:
copycat.slipnet:371:         return codelets
copycat.run:69:         for codelet_name, args, urgency in top_down_codelet_types:
copycat.run:74:         for codelet, urgency in codelets:
copycat.run:75:             deleted = self.coderack.post(codelet, urgency)
copycat.coderack:131:         removed_codelet = None
copycat.coderack:132:         codelets = self.codelets()
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.coderack:133:         if len(codelets) == self.max_codelets:
copycat.coderack:138:         if urgency >= 100:
copycat.coderack:141:             index = int((len(self.bins) * urgency) / 100.0)
copycat.coderack:142:             bin = self.bins[index]
copycat.coderack:143:         bin.add(codelet)
copycat.coderack:41:         self.codelets.append(codelet)
copycat.coderack:42:         codelet.bin = self
copycat.coderack:144:         codelet.timestamp = self.time
copycat.coderack:146:         return removed_codelet
copycat.run:76:             if deleted != None:
copycat.run:74:         for codelet, urgency in codelets:
copycat.run:75:             deleted = self.coderack.post(codelet, urgency)
copycat.coderack:131:         removed_codelet = None
copycat.coderack:132:         codelets = self.codelets()
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.coderack:133:         if len(codelets) == self.max_codelets:
copycat.coderack:138:         if urgency >= 100:
copycat.coderack:141:             index = int((len(self.bins) * urgency) / 100.0)
copycat.coderack:142:             bin = self.bins[index]
copycat.coderack:143:         bin.add(codelet)
copycat.coderack:41:         self.codelets.append(codelet)
copycat.coderack:42:         codelet.bin = self
copycat.coderack:144:         codelet.timestamp = self.time
copycat.coderack:146:         return removed_codelet
copycat.run:76:             if deleted != None:
copycat.run:74:         for codelet, urgency in codelets:
copycat.run:75:             deleted = self.coderack.post(codelet, urgency)
copycat.coderack:131:         removed_codelet = None
copycat.coderack:132:         codelets = self.codelets()
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.coderack:133:         if len(codelets) == self.max_codelets:
copycat.coderack:138:         if urgency >= 100:
copycat.coderack:141:             index = int((len(self.bins) * urgency) / 100.0)
copycat.coderack:142:             bin = self.bins[index]
copycat.coderack:143:         bin.add(codelet)
copycat.coderack:41:         self.codelets.append(codelet)
copycat.coderack:42:         codelet.bin = self
copycat.coderack:144:         codelet.timestamp = self.time
copycat.coderack:146:         return removed_codelet
copycat.run:76:             if deleted != None:
copycat.run:74:         for codelet, urgency in codelets:
copycat.run:75:             deleted = self.coderack.post(codelet, urgency)
copycat.coderack:131:         removed_codelet = None
copycat.coderack:132:         codelets = self.codelets()
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.coderack:133:         if len(codelets) == self.max_codelets:
copycat.coderack:138:         if urgency >= 100:
copycat.coderack:141:             index = int((len(self.bins) * urgency) / 100.0)
copycat.coderack:142:             bin = self.bins[index]
copycat.coderack:143:         bin.add(codelet)
copycat.coderack:41:         self.codelets.append(codelet)
copycat.coderack:42:         codelet.bin = self
copycat.coderack:144:         codelet.timestamp = self.time
copycat.coderack:146:         return removed_codelet
copycat.run:76:             if deleted != None:
copycat.run:74:         for codelet, urgency in codelets:
copycat.run:75:             deleted = self.coderack.post(codelet, urgency)
copycat.coderack:131:         removed_codelet = None
copycat.coderack:132:         codelets = self.codelets()
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.coderack:133:         if len(codelets) == self.max_codelets:
copycat.coderack:138:         if urgency >= 100:
copycat.coderack:141:             index = int((len(self.bins) * urgency) / 100.0)
copycat.coderack:142:             bin = self.bins[index]
copycat.coderack:143:         bin.add(codelet)
copycat.coderack:41:         self.codelets.append(codelet)
copycat.coderack:42:         codelet.bin = self
copycat.coderack:144:         codelet.timestamp = self.time
copycat.coderack:146:         return removed_codelet
copycat.run:76:             if deleted != None:
copycat.run:74:         for codelet, urgency in codelets:
copycat.run:75:             deleted = self.coderack.post(codelet, urgency)
copycat.coderack:131:         removed_codelet = None
copycat.coderack:132:         codelets = self.codelets()
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.coderack:118:         return toolbox.flatten([bin.codelets for bin in self.bins])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.coderack:133:         if len(codelets) == self.max_codelets:
copycat.coderack:138:         if urgency >= 100:
copycat.coderack:141:             index = int((len(self.bins) * urgency) / 100.0)
copycat.coderack:142:             bin = self.bins[index]
copycat.coderack:143:         bin.add(codelet)
copycat.coderack:41:         self.codelets.append(codelet)
copycat.coderack:42:         codelet.bin = self
copycat.coderack:144:         codelet.timestamp = self.time
copycat.coderack:146:         return removed_codelet
copycat.run:76:             if deleted != None:
copycat.run:74:         for codelet, urgency in codelets:
copycat.run:79:         self.slipnet.update()
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:319:             node.decay()
copycat.slipnet.slipnode:161:         amount = round(((100 - self.conceptual_depth) / 100.0) * self.activation)
copycat.slipnet.slipnode:162:         self.activation_buffer = max(0, self.activation_buffer - amount)
copycat.slipnet:320:             if node.activation == 100:
copycat.slipnet:318:         for node in self.slipnodes:
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:332:                     full_activation_probability = (node.activation / 100.0) ** 3
copycat.slipnet:333:                     if toolbox.flip_coin(full_activation_probability):
copycat.toolbox:87:     if prob_of_true >= 1:
copycat.toolbox:88:         return True
copycat.slipnet:334:                         node.activation = 100
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:332:                     full_activation_probability = (node.activation / 100.0) ** 3
copycat.slipnet:333:                     if toolbox.flip_coin(full_activation_probability):
copycat.toolbox:87:     if prob_of_true >= 1:
copycat.toolbox:88:         return True
copycat.slipnet:334:                         node.activation = 100
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:332:                     full_activation_probability = (node.activation / 100.0) ** 3
copycat.slipnet:333:                     if toolbox.flip_coin(full_activation_probability):
copycat.toolbox:87:     if prob_of_true >= 1:
copycat.toolbox:88:         return True
copycat.slipnet:334:                         node.activation = 100
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:332:                     full_activation_probability = (node.activation / 100.0) ** 3
copycat.slipnet:333:                     if toolbox.flip_coin(full_activation_probability):
copycat.toolbox:87:     if prob_of_true >= 1:
copycat.toolbox:88:         return True
copycat.slipnet:334:                         node.activation = 100
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:332:                     full_activation_probability = (node.activation / 100.0) ** 3
copycat.slipnet:333:                     if toolbox.flip_coin(full_activation_probability):
copycat.toolbox:87:     if prob_of_true >= 1:
copycat.toolbox:88:         return True
copycat.slipnet:334:                         node.activation = 100
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:332:                     full_activation_probability = (node.activation / 100.0) ** 3
copycat.slipnet:333:                     if toolbox.flip_coin(full_activation_probability):
copycat.toolbox:87:     if prob_of_true >= 1:
copycat.toolbox:88:         return True
copycat.slipnet:334:                         node.activation = 100
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:332:                     full_activation_probability = (node.activation / 100.0) ** 3
copycat.slipnet:333:                     if toolbox.flip_coin(full_activation_probability):
copycat.toolbox:87:     if prob_of_true >= 1:
copycat.toolbox:88:         return True
copycat.slipnet:334:                         node.activation = 100
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:332:                     full_activation_probability = (node.activation / 100.0) ** 3
copycat.slipnet:333:                     if toolbox.flip_coin(full_activation_probability):
copycat.toolbox:87:     if prob_of_true >= 1:
copycat.toolbox:88:         return True
copycat.slipnet:334:                         node.activation = 100
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:332:                     full_activation_probability = (node.activation / 100.0) ** 3
copycat.slipnet:333:                     if toolbox.flip_coin(full_activation_probability):
copycat.toolbox:87:     if prob_of_true >= 1:
copycat.toolbox:88:         return True
copycat.slipnet:334:                         node.activation = 100
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:332:                     full_activation_probability = (node.activation / 100.0) ** 3
copycat.slipnet:333:                     if toolbox.flip_coin(full_activation_probability):
copycat.toolbox:87:     if prob_of_true >= 1:
copycat.toolbox:88:         return True
copycat.slipnet:334:                         node.activation = 100
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:
copycat.slipnet:327:             node.activation = min(100, node.activation + node.activation_buffer)
copycat.slipnet:328:             if node.clamp:
copycat.slipnet:331:                 if node.activation >= 50:
copycat.slipnet:335:             node.buffer = 0
copycat.slipnet:326:         for node in self.slipnodes:


#### ADD INITIAL CODELETS


copycat.run:37:         if self.coderack.is_empty():
copycat.coderack:122:         return self.urgency_sum() == 0
copycat.coderack:166:         return sum([bin.urgency_sum(self.temperature) for bin in self.bins])
copycat.coderack:69:         return len(self.codelets) * self.urgency(temperature)
copycat.coderack:65:         return round((self.urgency_code + 1) ** ((110 - temperature) / 15))
copycat.coderack:166:         return sum([bin.urgency_sum(self.temperature) for bin in self.bins])
copycat.coderack:69:         return len(self.codelets) * self.urgency(temperature)
copycat.coderack:65:         return round((self.urgency_code + 1) ** ((110 - temperature) / 15))
copycat.coderack:166:         return sum([bin.urgency_sum(self.temperature) for bin in self.bins])
copycat.coderack:69:         return len(self.codelets) * self.urgency(temperature)
copycat.coderack:65:         return round((self.urgency_code + 1) ** ((110 - temperature) / 15))
copycat.coderack:166:         return sum([bin.urgency_sum(self.temperature) for bin in self.bins])
copycat.coderack:69:         return len(self.codelets) * self.urgency(temperature)
copycat.coderack:65:         return round((self.urgency_code + 1) ** ((110 - temperature) / 15))
copycat.coderack:166:         return sum([bin.urgency_sum(self.temperature) for bin in self.bins])
copycat.coderack:69:         return len(self.codelets) * self.urgency(temperature)
copycat.coderack:65:         return round((self.urgency_code + 1) ** ((110 - temperature) / 15))
copycat.coderack:166:         return sum([bin.urgency_sum(self.temperature) for bin in self.bins])
copycat.coderack:69:         return len(self.codelets) * self.urgency(temperature)
copycat.coderack:65:         return round((self.urgency_code + 1) ** ((110 - temperature) / 15))
copycat.coderack:166:         return sum([bin.urgency_sum(self.temperature) for bin in self.bins])
copycat.coderack:69:         return len(self.codelets) * self.urgency(temperature)
copycat.coderack:65:         return round((self.urgency_code + 1) ** ((110 - temperature) / 15))
copycat.coderack:166:         return sum([bin.urgency_sum(self.temperature) for bin in self.bins])


#### CHOOSE FIRST CODELET


copycat.run:45:         self.run_codelet(self.coderack.choose())
copycat.coderack:104:         if self.is_empty():
copycat.coderack:122:         return self.urgency_sum() == 0
copycat.coderack:166:         return sum([bin.urgency_sum(self.temperature) for bin in self.bins])
copycat.coderack:69:         return len(self.codelets) * self.urgency(temperature)
copycat.coderack:65:         return round((self.urgency_code + 1) ** ((110 - temperature) / 15))
copycat.coderack:166:         return sum([bin.urgency_sum(self.temperature) for bin in self.bins])
copycat.coderack:69:         return len(self.codelets) * self.urgency(temperature)
copycat.coderack:65:         return round((self.urgency_code + 1) ** ((110 - temperature) / 15))
copycat.coderack:166:         return sum([bin.urgency_sum(self.temperature) for bin in self.bins])
copycat.coderack:69:         return len(self.codelets) * self.urgency(temperature)
copycat.coderack:65:         return round((self.urgency_code + 1) ** ((110 - temperature) / 15))
copycat.coderack:166:         return sum([bin.urgency_sum(self.temperature) for bin in self.bins])
copycat.coderack:69:         return len(self.codelets) * self.urgency(temperature)
copycat.coderack:65:         return round((self.urgency_code + 1) ** ((110 - temperature) / 15))
copycat.coderack:166:         return sum([bin.urgency_sum(self.temperature) for bin in self.bins])
copycat.coderack:69:         return len(self.codelets) * self.urgency(temperature)
copycat.coderack:65:         return round((self.urgency_code + 1) ** ((110 - temperature) / 15))
copycat.coderack:166:         return sum([bin.urgency_sum(self.temperature) for bin in self.bins])
copycat.coderack:69:         return len(self.codelets) * self.urgency(temperature)
copycat.coderack:65:         return round((self.urgency_code + 1) ** ((110 - temperature) / 15))
copycat.coderack:166:         return sum([bin.urgency_sum(self.temperature) for bin in self.bins])
copycat.coderack:69:         return len(self.codelets) * self.urgency(temperature)
copycat.coderack:65:         return round((self.urgency_code + 1) ** ((110 - temperature) / 15))
copycat.coderack:166:         return sum([bin.urgency_sum(self.temperature) for bin in self.bins])
copycat.coderack:106:         urgencies = [bin.urgency_sum(self.temperature) for bin in self.bins]
copycat.coderack:69:         return len(self.codelets) * self.urgency(temperature)
copycat.coderack:65:         return round((self.urgency_code + 1) ** ((110 - temperature) / 15))
copycat.coderack:106:         urgencies = [bin.urgency_sum(self.temperature) for bin in self.bins]
copycat.coderack:69:         return len(self.codelets) * self.urgency(temperature)
copycat.coderack:65:         return round((self.urgency_code + 1) ** ((110 - temperature) / 15))
copycat.coderack:106:         urgencies = [bin.urgency_sum(self.temperature) for bin in self.bins]
copycat.coderack:69:         return len(self.codelets) * self.urgency(temperature)
copycat.coderack:65:         return round((self.urgency_code + 1) ** ((110 - temperature) / 15))
copycat.coderack:106:         urgencies = [bin.urgency_sum(self.temperature) for bin in self.bins]
copycat.coderack:69:         return len(self.codelets) * self.urgency(temperature)
copycat.coderack:65:         return round((self.urgency_code + 1) ** ((110 - temperature) / 15))
copycat.coderack:106:         urgencies = [bin.urgency_sum(self.temperature) for bin in self.bins]
copycat.coderack:69:         return len(self.codelets) * self.urgency(temperature)
copycat.coderack:65:         return round((self.urgency_code + 1) ** ((110 - temperature) / 15))
copycat.coderack:106:         urgencies = [bin.urgency_sum(self.temperature) for bin in self.bins]
copycat.coderack:69:         return len(self.codelets) * self.urgency(temperature)
copycat.coderack:65:         return round((self.urgency_code + 1) ** ((110 - temperature) / 15))
copycat.coderack:106:         urgencies = [bin.urgency_sum(self.temperature) for bin in self.bins]
copycat.coderack:69:         return len(self.codelets) * self.urgency(temperature)
copycat.coderack:65:         return round((self.urgency_code + 1) ** ((110 - temperature) / 15))
copycat.coderack:106:         urgencies = [bin.urgency_sum(self.temperature) for bin in self.bins]
copycat.coderack:107:         bin = toolbox.weighted_select(urgencies, self.bins)
copycat.toolbox:48:     if items:
copycat.toolbox:49:         return items[weighted_index(weights)]
copycat.toolbox:32:     total = sum(weights)
copycat.toolbox:33:     if total <= 0:
copycat.toolbox:35:     value = random.randint(0, total - 1)
copycat.toolbox:36:     new_total = 0
copycat.toolbox:37:     index = 0
copycat.toolbox:38:     for weight in weights:
copycat.toolbox:39:         new_total += weight
copycat.toolbox:40:         index += 1
copycat.toolbox:41:         if new_total > value:
copycat.toolbox:38:     for weight in weights:
copycat.toolbox:39:         new_total += weight
copycat.toolbox:40:         index += 1
copycat.toolbox:41:         if new_total > value:
copycat.toolbox:38:     for weight in weights:
copycat.toolbox:39:         new_total += weight
copycat.toolbox:40:         index += 1
copycat.toolbox:41:         if new_total > value:
copycat.toolbox:42:             return index - 1
copycat.coderack:108:         self.time += 1
copycat.coderack:109:         return bin.choose()
copycat.coderack:46:         codelet = random.choice(self.codelets)
copycat.coderack:47:         self.remove(codelet)
copycat.coderack:56:         if codelet in self.codelets:
copycat.coderack:57:             self.codelets.remove(codelet)
copycat.coderack:48:         return codelet


#### RUN FIRST CODELET


copycat.run:52:         codelets = codelet.run(self.coderack, self.slipnet, self.workspace)
copycat.coderack.codelets.group:378:         string = workspace.random_string()
copycat.workspace:600:         return random.choice([self.initial_string, self.target_string])
copycat.coderack.codelets.group:381:         if not string.bonds():
copycat.workspace.string:97:         bs = [b for b in toolbox.flatten(self.from_to_bonds) if b]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:78:         return sum(map(flatten, sequence), [])
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.toolbox:77:     if isinstance(sequence, list):
copycat.toolbox:80:         return [sequence]
copycat.workspace.string:97:         bs = [b for b in toolbox.flatten(self.from_to_bonds) if b]
copycat.workspace.string:97:         bs = [b for b in toolbox.flatten(self.from_to_bonds) if b]
copycat.workspace.string:97:         bs = [b for b in toolbox.flatten(self.from_to_bonds) if b]
copycat.workspace.string:97:         bs = [b for b in toolbox.flatten(self.from_to_bonds) if b]
copycat.workspace.string:97:         bs = [b for b in toolbox.flatten(self.from_to_bonds) if b]
copycat.workspace.string:97:         bs = [b for b in toolbox.flatten(self.from_to_bonds) if b]
copycat.workspace.string:97:         bs = [b for b in toolbox.flatten(self.from_to_bonds) if b]
copycat.workspace.string:97:         bs = [b for b in toolbox.flatten(self.from_to_bonds) if b]
copycat.workspace.string:97:         bs = [b for b in toolbox.flatten(self.from_to_bonds) if b]
copycat.workspace.string:98:         return list(set(bs))
copycat.coderack.codelets.group:382:             return
copycat.run:53:         if not codelets:
copycat.run:54:             return
copycat.run:47:         if self.workspace.translated_rule:
